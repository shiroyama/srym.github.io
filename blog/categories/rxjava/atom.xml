<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RxJava | do blog <- post]]></title>
  <link href="http://blog.shiroyama.us/blog/categories/rxjava/atom.xml" rel="self"/>
  <link href="http://blog.shiroyama.us/"/>
  <updated>2016-01-26T12:27:33+09:00</updated>
  <id>http://blog.shiroyama.us/</id>
  <author>
    <name><![CDATA[Fumihiko Shiroyama]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android で Either<L,R> を使おう]]></title>
    <link href="http://blog.shiroyama.us/blog/2015/08/10/either-in-android/"/>
    <updated>2015-08-10T21:45:49+09:00</updated>
    <id>http://blog.shiroyama.us/blog/2015/08/10/either-in-android</id>
    <content type="html"><![CDATA[<p>先日 <a href="http://blog.shiroyama.us/blog/2015/08/09/optional-in-android/" title="Android で Optional を使おう">Android で Optional を使おう</a> というエントリを書きました。</p>

<p><code>Optional&lt;T&gt;</code>ってのは <strong>値があるかないか</strong> を表現するって言いましたけど、あるメソッドが<code>Optional</code>で包んだ値<code>T</code>を返して来るってことは、言い換えると<code>Optional</code>は <strong>ある処理が成功したかまたは失敗した</strong> ことを表していると言えます。</p>

<p>しかしこれだと失敗したことは分かるけどその理由までは分からないですね。こういうときHaskellでは<code>Either</code>というデータ型を利用します。</p>

<p><code>haskell
Prelude&gt; :i Either
data Either a b = Left a | Right b
</code></p>

<p><code>Either</code>は <strong>失敗理由と成功データ</strong> の両方を表現するデータ型です。<br/>
<code>Left</code>が失敗、<code>Right</code>が成功に対応します。rightという単語の &ldquo;右&rdquo; と &ldquo;正しい&rdquo; の両方の意味が掛かった洒落ですね。これ、Androidにもあると便利なんですよ。</p>

<p>Javaでは伝統的に例外ケースはその名の通り &ldquo;例外&rdquo; で表現してきましたが、これは本質的に副作用です。それに微妙にRxJavaと相性が悪いです。</p>

<p>RxJavaでは複数の<code>Observable</code>をチェインさせてプロミス的な使い方をすることがままありますが、この間に起きた例外は<code>Subscriber</code>の<code>onError</code>に来ます。<br/>
しかし <strong>例外が発生したわけではないけど成功じゃないパターン</strong> って時々ありますよね。<br/>
んー例えば何でも良いんだけど、</p>

<ol>
<li>HTTP 200だけど<code>{'availability':false}</code>みたいなJSONでエラーを伝えてくるAPI</li>
<li>必要なパラメータが足りてない、形式が不正</li>
<li>2みたいなケースを<code>filter</code>オペレータで間引くんじゃなくてエラーは伝播させたい</li>
</ol>


<p>などなど。少なくとも自分はこういうときの銀の弾丸をまだ見つけられていません。</p>

<p>こういう時独自の例外を<code>throw</code>して<code>onError</code>で捕まえるのはあんまりしっくりきてません。<br/>
例外を単純な場合分けに使うのはいかにも筋が良くないし、そもそも<code>Observable</code>は<code>onComplete</code>か<code>onError</code>でそのライフサイクルを終えるので、復旧困難なケース以外でここに放り込むのは何か違う気がしてます。</p>

<p>これは<code>Either</code>を使うしかないでしょう！</p>

<h4>Either を作る</h4>

<p>Javaには<code>Either</code>なんてイカしたものは勿論ないので作るしかありませんが、「Java Either」とかでググると <a href="http://stackoverflow.com/questions/26162407/is-there-an-equivalent-of-scalas-either-in-java-8" title="Is there an equivalent of Scala's Either in Java 8?">Is there an equivalent of Scala&rsquo;s Either in Java 8?</a> なんてのがすぐに見つかります。</p>

<p>この例はJava8でしか動かせないのでAndroid用に書き換えたのが以下です。<br/>
一部うまく推論してくれないところがありましたが使わなそうなので無理に移植せず削除しました。</p>

<p>```java
package functional.data;</p>

<p>import com.eccyan.optional.Optional;</p>

<p>import rx.functions.Action1;
import rx.functions.Func1;</p>

<p>/<em>*
 * borrowed from <a href="http://stackoverflow.com/questions/26162407/is-there-an-equivalent-of-scalas-either-in-java-8">http://stackoverflow.com/questions/26162407/is-there-an-equivalent-of-scalas-either-in-java-8</a>
 </em>/
public final class Either&lt;L, R> {</p>

<pre><code>public static &lt;L, R&gt; Either&lt;L, R&gt; left(L value) {
    return new Either&lt;&gt;(Optional.of(value), Optional.empty());
}

public static &lt;L, R&gt; Either&lt;L, R&gt; right(R value) {
    return new Either&lt;&gt;(Optional.empty(), Optional.of(value));
}

private final Optional&lt;L&gt; left;
private final Optional&lt;R&gt; right;

private Either(Optional&lt;L&gt; l, Optional&lt;R&gt; r) {
    left = l;
    right = r;
}

public &lt;T&gt; Either&lt;T, R&gt; mapLeft(Func1&lt;? super L, ? extends T&gt; lFunc) {
    return new Either&lt;&gt;(left.map(lFunc), right);
}

public &lt;T&gt; Either&lt;L, T&gt; mapRight(Func1&lt;? super R, ? extends T&gt; rFunc) {
    return new Either&lt;&gt;(left, right.map(rFunc));
}

public void apply(Action1&lt;? super L&gt; lFunc, Action1&lt;? super R&gt; rFunc) {
    left.ifPresent(lFunc);
    right.ifPresent(rFunc);
}
</code></pre>

<p>}
```</p>

<p>早速自分のアプリに組み込んでみました。使い方はこんな感じです。<br/>
HaskellやScalaだと<code>Left</code>と<code>Right</code>でパターンマッチできるのですが、Javaだとそれも無理なので <code>Either#apply(leftラムダ式, rightラムダ式)</code> みたいな感じでお茶を濁していますね。</p>

<p>```java
@Bind(R.id.weatherInput)
EditText editTextCity;</p>

<p>@OnClick(R.id.submit)
void onClickSubmit(Button button) {</p>

<pre><code>WeatherApiCreator.create(CurrentWeatherService.class).getByCityName(editTextCity.getText().toString())
        .map(currentWeatherResponse -&gt; {
            Either&lt;Throwable, String&gt; either;
            if (currentWeatherResponse.getCode() != 200) {
                either = Either.left(new RuntimeException("error code: " + currentWeatherResponse.getCode()));
            } else {
                either = Either.right("Humidity: " + currentWeatherResponse.getMain().getHumidity());
            }
            return either;
        })
        .subscribeOn(Schedulers.newThread())
        .observeOn(AndroidSchedulers.mainThread())
        .subscribe(
                either -&gt; either.apply(
                        left -&gt; Toast.makeText(this, left.getMessage(), Toast.LENGTH_SHORT).show(),
                        right -&gt; Toast.makeText(this, right, Toast.LENGTH_SHORT).show()
                ),
                error -&gt; Toast.makeText(this, error.getMessage(), Toast.LENGTH_SHORT).show()
        );
</code></pre>

<p>}
```</p>

<p>もうひとつ大事なことがあります。 <strong>Eitherは写像を作る※</strong> ことができます。<br/>
以下の例をみてください。</p>

<p>```java
.map(currentWeatherResponse &ndash;> {</p>

<pre><code>Either&lt;Throwable, String&gt; either;
if (currentWeatherResponse.getCode() != 200) {
    either = Either.left(new RuntimeException("error code: " + currentWeatherResponse.getCode()));
} else {
    either = Either.right("Humidity: " + currentWeatherResponse.getMain().getHumidity());
}
return either;
</code></pre>

<p>})
.map(either &ndash;> either.mapRight(String::toUpperCase))
.subscribeOn(Schedulers.newThread())
.observeOn(AndroidSchedulers.mainThread())
.subscribe(</p>

<pre><code>    either -&gt; either.apply(
            left -&gt; Toast.makeText(this, left.getMessage(), Toast.LENGTH_SHORT).show(),
            right -&gt; Toast.makeText(this, right, Toast.LENGTH_SHORT).show()
    ),
    error -&gt; Toast.makeText(this, error.getMessage(), Toast.LENGTH_SHORT).show()
</code></pre>

<p>```</p>

<p>この例だと、処理が成功していれば結果をすべて大文字に変換しています。例があまりにもしょうもなくて申し訳ないです！</p>

<p>重要なのは、途中で処理が成功していようが失敗していようが気にせず <code>mapRight</code> でRightを写すことができている点です。<br/>
処理が途中で失敗しても、Rightは空っぽなので変換処理は単に空振りして、LeftはLeftのまま伝播するという寸法です。</p>

<p>言いたいこと伝わりますかね？ <strong>利用者が isRight とか isLeft とか判定してるようじゃ意味が無い</strong> のです。</p>

<h4>Either 右翼？</h4>

<p>以下、余談です。</p>

<p>上で僕は <strong>Eitherは写像を作ることができる</strong> と言いましたが、この例だとそれが嘘であることが識者にはバレバレだと思います。端的に言うと上のような<code>Either</code>は <strong>モナドじゃありません。</strong><br/>
Either自体はmapで写すことができておらず <code>mapRight</code>, <code>mapLeft</code> なんていう方法でそれぞれを操作しています。</p>

<p>こういうのは、LeftとRightを対等に扱ったEitherとか言われるみたいです。Scalaの標準ライブラリのEitherや上のJavaのコードなんかがその例です。</p>

<p>対して、HaskellやScalazのEitherは <strong>Right-Biased Eitehr</strong> とか呼ばれています。右寄りの、右派のっていう意味です。EitherをそもそもRightのコンテナとして利用しようという考え方です。<br/>
このようなEitherはRight値をひとつ包むモナドのように動作します。また、LeftとRightを結合するといかなる場合もLeftになります。</p>

<p>Androidで利用できるRight-BiasedなEitherは夏休みの自由研究にでもしようかと思います。それでは。</p>

<h5>参考リンク</h5>

<ul>
<li><a href="http://slides.pab-tech.net/either-and-validation/#1" title="EitherとValidation">EitherとValidation</a></li>
<li><a href="http://tech.recruit-mp.co.jp/server-side/post-2540/" title="Scalazを使おう #1">Scalazを使おう #1</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android で Optional<T> を使おう]]></title>
    <link href="http://blog.shiroyama.us/blog/2015/08/09/optional-in-android/"/>
    <updated>2015-08-09T22:09:12+09:00</updated>
    <id>http://blog.shiroyama.us/blog/2015/08/09/optional-in-android</id>
    <content type="html"><![CDATA[<p><a href="http://shibuya-apk.connpass.com/event/16640/" title="Shibuya.apk #2">Shibuya.apk #2</a> というイベントで登壇させていただきました。資料は<a href="http://www.slideshare.net/fumihikoshiroyama/rxjavaoptionalandroid" title="RxJavaとOptionalで関数型Androidしよう">ここ</a>にあります。<br/>
テーマは「RxJavaとOptionalで関数型Androidしよう」ですが昨今の巷での関数型言語の流行りに便乗した釣りタイトルです。誠に申し訳ございません。<br/>
で、そのテーマの前半部分である <code>Optional&lt;T&gt;</code> についてここで詳しくまとめておきたいと思います。</p>

<h3>Optionalとは何か</h3>

<p>Optional とは <strong>あるかもしれないしないかもしれない</strong> ものを表現する型です。<br/>
Haskell でいう <code>Maybe a  =  Nothing | Just a</code> です。Scalaでいう <code>Option[T] = Some(T) | None</code> です。<br/>
<code>Optional&lt;String&gt;</code> ってのがあると、文字列があるかもしれないしないかもしれないって意味になります。</p>

<p>これの何が嬉しいかっつーと <code>if (str != null &amp;&amp; !TextUtils.isEmpty(str))</code> みたいなつまらないボイラープレートを書かなくて済むんですよ。<br/>
あと、これが一番大事なので最初に書くけど、 <strong>Optionalの中身があるかどうか気にせずOptionalをmapで写したりできる</strong> んです。これは死ぬほど大事なので後でコード例とともに示します。<br/>
あとはまあ、 <code>Optional&lt;T&gt;</code> って書いとくと <strong>ああこれは中身がnullになりうるんだな</strong> ってことが仕様としてハッキリします。これはドキュメントに書くより、<code>@Nullable</code> 修飾するより強力です。</p>

<h3>AndroidはJava8使えない</h3>

<p>Java8からは <code>Optional&lt;T&gt;</code> が使えます。Java8ではラムダ式だとか関数クラス型だとかStream APIとかが追加されてますが、個人的にはOptionalが最も大切です。<br/>
で、御存知の通りAndroidは未だにJava6互換でいくつかJava7のAPIが使えるにとどまっており、非常にレガシーな書き方を余儀なくされます。とても悲しい。</p>

<p>ところが、私の敬愛するsys1yagiさんという方の <a href="http://sys1yagi.hatenablog.com/entry/2015/01/26/183000" title="RxJavaのObservable&lt;T&gt;でOptional&lt;T&gt;を代行する">RxJavaのObservable<T>でOptional<T>を代行する</a> という神のようなブログエントリでAndroidでもOptionalが使えることが示されました。</p>

<p>当該エントリをそのままコピペしてもほとんど申し分ないOptionalが扱えるのですが、一部RxJavaのObservableがむき出しになっており、RxJava内でOptionalを取り回したいときにちょっと見た目がわかりづらくなるので完全にOptionalという名前でラップしたライブラリを自作しようとしたところ、なんと既にありました。<a href="https://github.com/eccyan/RxJava-Optional" title="eccyan/RxJava-Optional">eccyan/RxJava-Optional</a> です。作者さま本当にありがとうございます。</p>

<h3>AndroidでOptional早速使おう</h3>

<p>gradleで入れられます。</p>

<p><code>
compile 'io.reactivex:rxandroid:0.25.0'
compile 'com.eccyan:rxjava-optional:1.1.2'
</code></p>

<p>バージョンに注意してください。公式のREADMEだと<code>1.1.0</code>になってるのですが、このバージョンだとAPIレベル19以降でしか使えない<code>Objects.requireNonNull</code>がそのまま使われており、古いAndroidで動きません。<br/>
<code>1.1.2</code>では自作のObjectsクラスがバンドルされており古いAndroidでもちゃんと動きます。</p>

<p>インストールできたら早速使いまくりましょう。</p>

<p>なお、以下の例ではラムダ式が出てきまくりますが、これは<code>Retrolambda</code>というライブラリとAndroid Studioのプラグインを組み合わせて使ってます。<br/>
インストール方法がちょっとややこしいので別エントリにまとめ次第追記します。</p>

<h4>Optionalでくるむ</h4>

<p>まずOptionalを使うポイントですが、前述のとおりあるかもしれないしないかもしれないところで使います。<br/>
具体的に言うと、関数の最後で <code>Map#get</code> だとか <code>String#indexOf</code> の結果を戻してるような箇所はOptionalで包む格好の場所だと思います。</p>

<p>値をOptinalで包むメソッドは3つ用意されてます。</p>

<ul>
<li><code>Optional.of(T)</code></li>
<li><code>Optional.ofNullable(T)</code></li>
<li><code>Optional.empty()</code></li>
</ul>


<p><code>Optional.of(obj)</code> はobjがnullだった場合にぬるぽを投げます。対して、<code>Optional.ofNullable(obj)</code> はnullかも知れないobjも安心して包めます。<br/>
だからと言って <strong>ofNullabeを毎回使いましょう</strong> みたいなルールにしちゃダメですよ。<br/>
nullじゃないことが明らかな場合、またはnullであっちゃならない場所では<code>of</code>を使うべきです。なぜなら本来nullであってはならない場所ならその場でぬるぽで落ちるべきであるからです。</p>

<p>nullでないのが明らかなら<code>T</code>でいいじゃんという声もありそうですが、戻り値としては<code>Optional&lt;T&gt;</code>を返したいというのとその場でobjがnullでないことが明らかというのはまた別の話です。</p>

<p>話がそれましたが、<code>Optional.empty()</code> は <code>Optional.ofNullable(null)</code> と同じことです。</p>

<h4>Optionalから値を取り出す</h4>

<p>Optionalから値を取り出します。ホントは<code>map</code>とかが一番重要なんですが、後に譲ります。</p>

<ul>
<li><code>Optional#get()</code></li>
<li><code>Optional#orElse(T)</code></li>
<li><code>Optional#orElseCall(() -&gt; {T})</code></li>
<li><code>Optional#orElseThrow(() -&gt; {Throwable})</code></li>
</ul>


<p><code>Optional#get()</code> は中身がnullのときは<code>NoSuchElementException</code>が投げられます。これはぬるぽを踏むのと一緒であんま意味がないので僕は使ったことないです。</p>

<p><code>Optional#orElse(T)</code> は中身がnullのときに引数で与えた値が取り出せます。<code>map</code>と組み合わせて死ぬほど使うので覚えておいてください。</p>

<p><code>Optional#orElseCall(() -&gt; {T})</code> は<code>orElse</code>に似てますが、中身がnullのときに初めてラムダ式が評価されてその結果が取り出せます。引数が遅延評価されるのでより関数型っぽいですね。初期化処理がコスト高い場合なんかはこっちを使うと良いかもしれません。</p>

<p><code>Optional#orElseThrow(() -&gt; {Throwable})</code> は中身がnullのときはラムダ式で作られた例外が投げられます。<br/>
Optionalを何回も<code>map</code>や<code>filter</code>して最終的に中身がなかったら例外を上げるっていうケース、時々あるような気がするので何回か使った記憶がありますが、それでも<code>orElse</code>を使う頻度よりはるかに少ないはずです。<br/>
もし<code>orElseThrow</code>をどこででも使ってるとしたらそれはなんかOptionalを誤解してる気がします。普通にTを返すメソッドを<code>throws HogeException</code>してください。</p>

<h4>Optionalをモナドとして使うよ</h4>

<p>冒頭で <strong>Optionalは中身があるかどうか気にせずOptionalのままmapで写したりできる</strong> って書きました。これめっちゃ大事なことなんですよ。</p>

<p>たとえば、<code>Optional#isPresent()</code> っていう、中身の値があるかどうか調べるメソッドがあるんですが、ちょっと下のコード見てください。</p>

<p><code>java
if (opt.isPresent()) {
   String val = opt.get();
}
</code></p>

<p>これ何の意味があるんでしょうか。これ今までの退屈なnullチェックと同じですよね。Optional使った意味全くないですよね。なのでこれは最悪です。こんなの書かないようにしてください。</p>

<p>Optionalは下みたいなクールな方法で扱います。</p>

<ul>
<li><code>Optional#ifPresent(値を消費するラムダ式)</code></li>
<li><code>Optional#map(TをUに写すラムダ式)</code></li>
<li><code>Optional#flatMap(TをOptional&lt;U&gt;に写すラムダ式)</code></li>
<li><code>Optional#filter(Tを新しいTに写すときの条件を示すラムダ式)</code></li>
</ul>


<h5>Optional#ifPresent</h5>

<p><code>ifPresent</code>はOptionalの中身があったときだけ引数のラムダ式を実行してくれます。</p>

<p><code>java
Optional&lt;String&gt; strOpt = Optional.of("V8!!!");
strOpt.ifPresent(s -&gt; Log.i(TAG, s));
</code></p>

<p>これはもう見ての通りです。注意点は、<code>ifPresent</code>は <strong>値を返す式ではない</strong> ということです。そういう場合は後述の<code>map</code>を使います。</p>

<h5>Optional#map</h5>

<p><code>map</code>は元のOptionalに包まれた<code>&lt;T&gt;</code>の値を、新しい<code>&lt;U&gt;</code>に写します。要するに変換です。</p>

<p>```java
Optional<String> strOpt = Optional.of(&ldquo;123&rdquo;);
strOpt.map(s &ndash;> Integer.valueOf(s)) // strOpt.map(Integer::valueOf) とも書けるよ！</p>

<pre><code>  .ifPresent(i -&gt; Log.i(TAG, "i: " + i));
</code></pre>

<p>```</p>

<p>上記は分かりやすさのためにほとんど意味のないコードですが、何かエンティティ（例えばユーザ情報）を<code>map</code>してユーザ名だけの圏を得たりするのは非常によくする操作なんじゃないでしょうか。</p>

<p><code>map</code>に<code>orElse</code>をつなぐと例外処理など使わずとも上から下までOptionalとその写像だけを連ねた結果をエレガントに扱うことができますよ。</p>

<p>```java
int result = Optional.ofNullable(strNullable)</p>

<pre><code>                 .map(Integer::valueOf)
                 .orElse(123);
</code></pre>

<p>```</p>

<p>この例はしょうもなさすぎてエレガントとは言い難いですがね！けどアイディアは伝わるでしょう。<code>map</code>はいくら連ねてもいいんですよ。</p>

<h5>Optional#flatMap</h5>

<p><code>flatMap</code>はOptionalで包まれた値を次に渡すときに使います。ちょっと分かりづらいという人も居ますが、簡単ですよ。<br/>
<code>map</code>が<code>T</code>から<code>U</code>を写すのに使う、つまり<code>map</code>の返り値は値型そのものなんですが、既に<code>Optional&lt;U&gt;</code>を返す関数とかがあるときにそれをそのまま使っちゃうと<code>Optional&lt;Optional&lt;U&gt;&gt;</code>が写されちゃうんで、それが適切でないときに<code>flatMap</code>でぺしゃんこにします。flatten（=平らにする）して（map=写す）だけです。</p>

<p>```java
Optional<Token> tokenOpt = getToken();
tokenOpt.flatMap(token &ndash;> someApiCall(token, args))</p>

<pre><code>    .ifPresent(apiResult -&gt; processApiResult(apapiResult)); // this::processApiResult とも書けry
</code></pre>

<p>```</p>

<p>こんな感じ。<br/>
この例でいうと<code>someApiCall</code>は<code>Optional&lt;ApiResult&gt;</code>を返すので、そのままだと<code>ifPresent</code>に<code>Optional&lt;Optional&lt;ApiResult&gt;&gt;</code>が渡ってしまうので<code>flatMap</code>でぺったんこにしています。ぺったんこの意図するところ、伝わりますかね。</p>

<h5>Optional#filter</h5>

<p>最後に<code>filter</code>です。これは例を見てもらうと簡単です。</p>

<p>```java
Optional.of(123)</p>

<pre><code>    .filter(i -&gt; i &gt; 100)
    .orElse(100);
</code></pre>

<p>```</p>

<p><code>filter</code>に渡すラムダ式は値を受け取って真偽値を返すようなものを渡します。真になったものだけ生き残るというわけです。</p>

<h4>まとめ</h4>

<p>この通り、Java8のOptionalとほぼ遜色のないコードを書けることが分かると思います。正しく使う限りデメリットが見当たらないのでぜひ使うことをおすすめしたいです。</p>

<p>本エントリでは触れませんが、この代用版OptionalとRxJava/RxAndroidは組み合わせて使うとめっちゃ強力です。（元々同じものなんですけどね）<br/>
機会があったらその辺も書こうかなと思います。では。</p>

<h4>参考リンク</h4>

<ul>
<li><a href="http://sys1yagi.hatenablog.com/entry/2015/01/26/183000" title="RxJavaのObservable&lt;T&gt;でOptional&lt;T&gt;を代行する">RxJavaのObservable<T>でOptional<T>を代行する</a></li>
<li><a href="http://www.ne.jp/asahi/hishidama/home/tech/java/optional.html" title="Java Optionalメモ(Hishidama's Java8 Optional Memo) ">Java Optionalメモ(Hishidama&rsquo;s Java8 Optional Memo) </a></li>
<li><a href="http://irof.hateblo.jp/entry/2015/05/05/071450" title="Optionalの取り扱いかた">Optionalの取り扱いかた</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
