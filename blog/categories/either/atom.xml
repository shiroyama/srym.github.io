<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Either | post <$> shiroyama <*> blog]]></title>
  <link href="http://blog.shiroyama.us/blog/categories/either/atom.xml" rel="self"/>
  <link href="http://blog.shiroyama.us/"/>
  <updated>2016-01-26T12:13:31+09:00</updated>
  <id>http://blog.shiroyama.us/</id>
  <author>
    <name><![CDATA[Fumihiko Shiroyama]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android で Either<L,R> を使おう]]></title>
    <link href="http://blog.shiroyama.us/blog/2015/08/10/either-in-android/"/>
    <updated>2015-08-10T21:45:49+09:00</updated>
    <id>http://blog.shiroyama.us/blog/2015/08/10/either-in-android</id>
    <content type="html"><![CDATA[<p>先日 <a href="http://blog.shiroyama.us/blog/2015/08/09/optional-in-android/" title="Android で Optional を使おう">Android で Optional を使おう</a> というエントリを書きました。</p>

<p><code>Optional&lt;T&gt;</code>ってのは <strong>値があるかないか</strong> を表現するって言いましたけど、あるメソッドが<code>Optional</code>で包んだ値<code>T</code>を返して来るってことは、言い換えると<code>Optional</code>は <strong>ある処理が成功したかまたは失敗した</strong> ことを表していると言えます。</p>

<p>しかしこれだと失敗したことは分かるけどその理由までは分からないですね。こういうときHaskellでは<code>Either</code>というデータ型を利用します。</p>

<p><code>haskell
Prelude&gt; :i Either
data Either a b = Left a | Right b
</code></p>

<p><code>Either</code>は <strong>失敗理由と成功データ</strong> の両方を表現するデータ型です。<br/>
<code>Left</code>が失敗、<code>Right</code>が成功に対応します。rightという単語の &ldquo;右&rdquo; と &ldquo;正しい&rdquo; の両方の意味が掛かった洒落ですね。これ、Androidにもあると便利なんですよ。</p>

<p>Javaでは伝統的に例外ケースはその名の通り &ldquo;例外&rdquo; で表現してきましたが、これは本質的に副作用です。それに微妙にRxJavaと相性が悪いです。</p>

<p>RxJavaでは複数の<code>Observable</code>をチェインさせてプロミス的な使い方をすることがままありますが、この間に起きた例外は<code>Subscriber</code>の<code>onError</code>に来ます。<br/>
しかし <strong>例外が発生したわけではないけど成功じゃないパターン</strong> って時々ありますよね。<br/>
んー例えば何でも良いんだけど、</p>

<ol>
<li>HTTP 200だけど<code>{'availability':false}</code>みたいなJSONでエラーを伝えてくるAPI</li>
<li>必要なパラメータが足りてない、形式が不正</li>
<li>2みたいなケースを<code>filter</code>オペレータで間引くんじゃなくてエラーは伝播させたい</li>
</ol>


<p>などなど。少なくとも自分はこういうときの銀の弾丸をまだ見つけられていません。</p>

<p>こういう時独自の例外を<code>throw</code>して<code>onError</code>で捕まえるのはあんまりしっくりきてません。<br/>
例外を単純な場合分けに使うのはいかにも筋が良くないし、そもそも<code>Observable</code>は<code>onComplete</code>か<code>onError</code>でそのライフサイクルを終えるので、復旧困難なケース以外でここに放り込むのは何か違う気がしてます。</p>

<p>これは<code>Either</code>を使うしかないでしょう！</p>

<h4>Either を作る</h4>

<p>Javaには<code>Either</code>なんてイカしたものは勿論ないので作るしかありませんが、「Java Either」とかでググると <a href="http://stackoverflow.com/questions/26162407/is-there-an-equivalent-of-scalas-either-in-java-8" title="Is there an equivalent of Scala's Either in Java 8?">Is there an equivalent of Scala&rsquo;s Either in Java 8?</a> なんてのがすぐに見つかります。</p>

<p>この例はJava8でしか動かせないのでAndroid用に書き換えたのが以下です。<br/>
一部うまく推論してくれないところがありましたが使わなそうなので無理に移植せず削除しました。</p>

<p>```java
package functional.data;</p>

<p>import com.eccyan.optional.Optional;</p>

<p>import rx.functions.Action1;
import rx.functions.Func1;</p>

<p>/<em>*
 * borrowed from <a href="http://stackoverflow.com/questions/26162407/is-there-an-equivalent-of-scalas-either-in-java-8">http://stackoverflow.com/questions/26162407/is-there-an-equivalent-of-scalas-either-in-java-8</a>
 </em>/
public final class Either&lt;L, R> {</p>

<pre><code>public static &lt;L, R&gt; Either&lt;L, R&gt; left(L value) {
    return new Either&lt;&gt;(Optional.of(value), Optional.empty());
}

public static &lt;L, R&gt; Either&lt;L, R&gt; right(R value) {
    return new Either&lt;&gt;(Optional.empty(), Optional.of(value));
}

private final Optional&lt;L&gt; left;
private final Optional&lt;R&gt; right;

private Either(Optional&lt;L&gt; l, Optional&lt;R&gt; r) {
    left = l;
    right = r;
}

public &lt;T&gt; Either&lt;T, R&gt; mapLeft(Func1&lt;? super L, ? extends T&gt; lFunc) {
    return new Either&lt;&gt;(left.map(lFunc), right);
}

public &lt;T&gt; Either&lt;L, T&gt; mapRight(Func1&lt;? super R, ? extends T&gt; rFunc) {
    return new Either&lt;&gt;(left, right.map(rFunc));
}

public void apply(Action1&lt;? super L&gt; lFunc, Action1&lt;? super R&gt; rFunc) {
    left.ifPresent(lFunc);
    right.ifPresent(rFunc);
}
</code></pre>

<p>}
```</p>

<p>早速自分のアプリに組み込んでみました。使い方はこんな感じです。<br/>
HaskellやScalaだと<code>Left</code>と<code>Right</code>でパターンマッチできるのですが、Javaだとそれも無理なので <code>Either#apply(leftラムダ式, rightラムダ式)</code> みたいな感じでお茶を濁していますね。</p>

<p>```java
@Bind(R.id.weatherInput)
EditText editTextCity;</p>

<p>@OnClick(R.id.submit)
void onClickSubmit(Button button) {</p>

<pre><code>WeatherApiCreator.create(CurrentWeatherService.class).getByCityName(editTextCity.getText().toString())
        .map(currentWeatherResponse -&gt; {
            Either&lt;Throwable, String&gt; either;
            if (currentWeatherResponse.getCode() != 200) {
                either = Either.left(new RuntimeException("error code: " + currentWeatherResponse.getCode()));
            } else {
                either = Either.right("Humidity: " + currentWeatherResponse.getMain().getHumidity());
            }
            return either;
        })
        .subscribeOn(Schedulers.newThread())
        .observeOn(AndroidSchedulers.mainThread())
        .subscribe(
                either -&gt; either.apply(
                        left -&gt; Toast.makeText(this, left.getMessage(), Toast.LENGTH_SHORT).show(),
                        right -&gt; Toast.makeText(this, right, Toast.LENGTH_SHORT).show()
                ),
                error -&gt; Toast.makeText(this, error.getMessage(), Toast.LENGTH_SHORT).show()
        );
</code></pre>

<p>}
```</p>

<p>もうひとつ大事なことがあります。 <strong>Eitherは写像を作る※</strong> ことができます。<br/>
以下の例をみてください。</p>

<p>```java
.map(currentWeatherResponse &ndash;> {</p>

<pre><code>Either&lt;Throwable, String&gt; either;
if (currentWeatherResponse.getCode() != 200) {
    either = Either.left(new RuntimeException("error code: " + currentWeatherResponse.getCode()));
} else {
    either = Either.right("Humidity: " + currentWeatherResponse.getMain().getHumidity());
}
return either;
</code></pre>

<p>})
.map(either &ndash;> either.mapRight(String::toUpperCase))
.subscribeOn(Schedulers.newThread())
.observeOn(AndroidSchedulers.mainThread())
.subscribe(</p>

<pre><code>    either -&gt; either.apply(
            left -&gt; Toast.makeText(this, left.getMessage(), Toast.LENGTH_SHORT).show(),
            right -&gt; Toast.makeText(this, right, Toast.LENGTH_SHORT).show()
    ),
    error -&gt; Toast.makeText(this, error.getMessage(), Toast.LENGTH_SHORT).show()
</code></pre>

<p>```</p>

<p>この例だと、処理が成功していれば結果をすべて大文字に変換しています。例があまりにもしょうもなくて申し訳ないです！</p>

<p>重要なのは、途中で処理が成功していようが失敗していようが気にせず <code>mapRight</code> でRightを写すことができている点です。<br/>
処理が途中で失敗しても、Rightは空っぽなので変換処理は単に空振りして、LeftはLeftのまま伝播するという寸法です。</p>

<p>言いたいこと伝わりますかね？ <strong>利用者が isRight とか isLeft とか判定してるようじゃ意味が無い</strong> のです。</p>

<h4>Either 右翼？</h4>

<p>以下、余談です。</p>

<p>上で僕は <strong>Eitherは写像を作ることができる</strong> と言いましたが、この例だとそれが嘘であることが識者にはバレバレだと思います。端的に言うと上のような<code>Either</code>は <strong>モナドじゃありません。</strong><br/>
Either自体はmapで写すことができておらず <code>mapRight</code>, <code>mapLeft</code> なんていう方法でそれぞれを操作しています。</p>

<p>こういうのは、LeftとRightを対等に扱ったEitherとか言われるみたいです。Scalaの標準ライブラリのEitherや上のJavaのコードなんかがその例です。</p>

<p>対して、HaskellやScalazのEitherは <strong>Right-Biased Eitehr</strong> とか呼ばれています。右寄りの、右派のっていう意味です。EitherをそもそもRightのコンテナとして利用しようという考え方です。<br/>
このようなEitherはRight値をひとつ包むモナドのように動作します。また、LeftとRightを結合するといかなる場合もLeftになります。</p>

<p>Androidで利用できるRight-BiasedなEitherは夏休みの自由研究にでもしようかと思います。それでは。</p>

<h5>参考リンク</h5>

<ul>
<li><a href="http://slides.pab-tech.net/either-and-validation/#1" title="EitherとValidation">EitherとValidation</a></li>
<li><a href="http://tech.recruit-mp.co.jp/server-side/post-2540/" title="Scalazを使おう #1">Scalazを使おう #1</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
