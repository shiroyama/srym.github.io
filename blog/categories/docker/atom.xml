<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Docker | do blog <- post]]></title>
  <link href="http://blog.shiroyama.us/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://blog.shiroyama.us/"/>
  <updated>2016-01-26T12:27:33+09:00</updated>
  <id>http://blog.shiroyama.us/</id>
  <author>
    <name><![CDATA[Fumihiko Shiroyama]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[とりあえずMacでDocker入門する]]></title>
    <link href="http://blog.shiroyama.us/blog/2015/03/21/docker-on-mac/"/>
    <updated>2015-03-21T23:36:52+09:00</updated>
    <id>http://blog.shiroyama.us/blog/2015/03/21/docker-on-mac</id>
    <content type="html"><![CDATA[<p>とりあえずMacでDocker入門したのでメモ。<br/>
後述するブリッジインタフェースの件とかは意外に情報がなくて苦労した。</p>

<h4>Dockerとは</h4>

<p>いま流行りのコンテナ型仮想化技術のひとつ。<br/>
これについては長くなるので別のエントリに書いておく。<br/>
とりあえずAWSのEC2とかとはちょっと違う仮想化技術だということが伝わればよい。</p>

<h4>事前準備</h4>

<ul>
<li><a href="http://brew.sh/" title="Homebrew">Homebrew</a></li>
<li><a href="https://www.virtualbox.org/" title="VirtualBox">VirtualBox</a></li>
</ul>


<h4>下準備</h4>

<p>深く考えずに下をコピペ</p>

<p><code>bash
$ brew update
$ brew tap homebrew/binary
$ brew install docker
$ brew install boot2docker
$ boot2docker init
$ boot2docker up
</code></p>

<p><code>boot2docker up</code> したら docker server に接続するための情報が出力されるので <code>.zshrc</code> に書いとく。</p>

<p>```bash
$ cat&lt;&lt;&lsquo;EOS&rsquo;>~/.zshrc</p>

<blockquote><h1>boot2docker</h1>

<p>export DOCKER_HOST=tcp://192.168.59.103:2376
export DOCKER_CERT_PATH=/Users/shiroyama/.boot2docker/certs/boot2docker-vm
export DOCKER_TLS_VERIFY=1
EOS</p></blockquote>

<p>$ source ~/.zshrc
```</p>

<p>こんなのが出たらOK。まだコンテナ追加してないのでエラーが出ないことが確認できれば充分。</p>

<p><code>bash
$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
</code></p>

<p>余談だけど <a href="http://boot2docker.io/" title="boot2docker">boot2docker</a> は何者かというと、MacでDockerを使うための橋渡し。DockerはLinuxカーネルの機能を使うのでMacにはネイティブ対応していない。</p>

<p>実はboot2dockerはDockerが使えるLinuxインスタンスのVMインスタンス+周辺スクリプト群にすぎない。仮想化技術を使うために仮想化技術を使うのだ。まあMacでちょっと試す分には大変ありがたい。</p>

<h4>boot2dockerにブリッジインタフェースを追加</h4>

<p>このあと実際にDockerコンテナを作っていくんだけど、その前に重要なステップがあって、以下の手順でboot2dockerにブリッジインタフェースを追加しておく。これをしておかないとDockerコンテナとMacとで通信ができないので不便なことこの上ない。</p>

<ol>
<li><code>boot2docker down</code></li>
<li>VirtualBoxを起動し<code>boot2docker-vm</code>を選択</li>
<li>設定からネットワークを選んでアダプター3を有効化しブリッジアダプターを選択する。</li>
<li><code>boot2docker up</code></li>
</ol>


<p><img src="/images/docker/boot2docker.jpg" title="&lsquo;boot2docker bridge&rsquo; &lsquo;boot2docker bridge&rsquo;" ></p>

<p><a href="http://qiita.com/nyamage/items/fad845bc5e4ce3cf33eb" title="boot2docker上のコンテナに別ホストからアクセスする">boot2docker上のコンテナに別ホストからアクセスする</a> とかが参考になるよ。</p>

<h4>Dockerコンテナ is 何</h4>

<p>Dockerコンテナは雑に言うとVMインスタンスに相当するもの。<br/>
ただ、DockerコンテナをXenとかKVMみたいな、いわゆる普通のLinuxのVMインスタンスだと思って使うと大変な目に遭う（つくりも思想もまったく別物）ので、これも詳しくは別エントリに譲りたい。</p>

<h4>Dockerfile</h4>

<p>DockerコンテナはDockerfileという設定ファイルにしたがってセットアップされて起動する。</p>

<p>Dockerfileの中に、</p>

<ul>
<li>ベースとなるイメージはUbuntuで&hellip;</li>
<li>Nginxインストールして&hellip;</li>
<li>80番でLISTENして&hellip;</li>
<li>起動！</li>
</ul>


<p>みたいなことを順番に書いていくというわけ。</p>

<h4>Dockerfile書いてみる</h4>

<p>なんか適当に <code>test</code> みたいなディレクトリ掘ってそこにDockerfileというファイル名で作成する。</p>

<p>```vim
FROM ubuntu:latest</p>

<p>RUN apt-get update &amp;&amp; apt-get install -y nginx</p>

<p>EXPOSE 80
CMD [&ldquo;/usr/sbin/nginx&rdquo;, &ldquo;-g&rdquo;, &ldquo;daemon off;&rdquo;]
```</p>

<p>なんとなく意味分かるんじゃなかろうか。</p>

<p>Dockerfileはそれだけで1エントリ書くつもりなのでそこで詳しく書く。</p>

<h4>Dockerコンテナを起動</h4>

<p>```bash
$ docker build -t firstdocker/nginx .</p>

<p>$ docker images
REPOSITORY           TAG                  IMAGE ID            CREATED             VIRTUAL SIZE
firstdocker/nginx    latest               d9fcf4f72bcd        5 seconds ago       227 MB</p>

<p>$ docker run -d -p 80:80 firstdocker/nginx
```</p>

<h5>docker build</h5>

<p>まず、1行目で <code>docker build</code> してDockerfileからDockerイメージを作る。DockerイメージはDockerコンテナのもとになるものである。</p>

<p><code>-t</code> オプションで後から参照しやすいようにタグをつけている。<code>レポジトリ名/バージョン</code>が慣習っぽいけど僕は<code>サービス名/コンテナの役割</code>みたいな感じで付けてる。まあ公式サイト見てください。</p>

<p>最後の <code>.</code> でカレントディレクトリにあるDockerfileをビルドする。</p>

<p>エラーなくビルドできたら <code>docker images</code> で確認。</p>

<h5>docker run</h5>

<p>最後に <code>docker run -d -p 80:80 firstdocker/nginx</code> でDockerコンテナを起動している。</p>

<p><code>-d</code> オプションでDockerコンテナをバックグラウンドで起動。</p>

<p><code>-p</code> オプションで <code>dockerサーバのポート:dockerコンテナのポート</code> のようにして、ポートのバインディングをする。今回のケースだと、NginxがインストールされたDockerコンテナの80番ポートをDockerサーバ、つまりboot2dockerの80番ポートに割り当てるというわけだ。</p>

<p>最後の <code>firstdocker/nginx</code> で今から起動するDockerコンテナの元になるイメージを指定している。もちろん最前こしらえたものを指定している。</p>

<p><code>docker run</code> は <code>-d</code> オプションの代わりに</p>

<p><code>bash
$ docker run -i -t -p 80:80 firstdocker/nginx bash
</code></p>

<p>こんな風にして、Dockerコンテナを立ち上げつつコンテナにBASHをログインシェルとしてログインするというようなこともできる。ただしこの場合はDockerfileに書いた <code>CMD ["/usr/sbin/nginx", "-g", "daemon off;"]</code> が実行されないのでNginxが起動しない。</p>

<p>この辺りはDockerfileだけを深く掘り下げたエントリで詳しく書くのでいまはあまり気にしないで欲しい。</p>

<h5>確認してみよう！</h5>

<p><code>boot2docker ssh</code> して <code>ifconfig</code> してみよう。<br/>
上の方でboot2dockerのネットワークアダプター3をブリッジにしたので <code>eth2</code> の情報をメモしておく。</p>

<p>```bash
$ ifconfig
&hellip;
eth2      Link encap:Ethernet  HWaddr 08:00:27:D0:9B:9F</p>

<pre><code>      inet addr:192.168.11.111  Bcast:192.168.11.255  Mask:255.255.255.0
      inet6 addr: fe80::a00:27ff:fed0:9b9f/64 Scope:Link
      UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
      RX packets:76 errors:0 dropped:0 overruns:0 frame:0
      TX packets:13 errors:0 dropped:0 overruns:0 carrier:0
      collisions:0 txqueuelen:1000
      RX bytes:42936 (41.9 KiB)  TX bytes:2559 (2.4 KiB)
      Interrupt:17 Base address:0xd060
</code></pre>

<p>```</p>

<p>僕の環境では <code>192.168.11.111</code> がboot2dockerの（Macから到達可能な）IPアドレスだ。メモしておく。</p>

<p>Macで任意のブラウザを立ち上げて、<code>192.168.11.111</code> にアクセスしてNginxのデフォルト画面が表示されたらOKだ！</p>

<h5>dockerコンテナに接続</h5>

<p><code>docker ps</code> で起動中のコンテナを確認してみる。</p>

<p><code>bash
$ docker ps
CONTAINER ID        IMAGE                      COMMAND                CREATED             STATUS              PORTS                NAMES
703409c1d96c        firstdocker/nginx:latest   "/usr/sbin/nginx -g    46 minutes ago      Up 7 seconds        0.0.0.0:80-&gt;80/tcp   trusting_cori
</code></p>

<p>先ほどのコンテナが起動している。</p>

<p>停まっているコンテナは <code>docker start [NAME]</code> で起動できる。他にも <code>start/stop/restart/kill</code> など色々あるが、だいたい名前をみて想像がつくと思う。詳しくは <code>--help</code> してみると分かる。</p>

<p>で、起動しているインスタンスには以下のようにして接続する。</p>

<p><code>bash
$ docker exec -it trusting_cori bash
</code></p>

<p><code>docker exec -it</code> まではとりあえずおまじないでいいです。</p>

<p><code>trusting_cori</code> は対象のコンテナ名を指定している。<code>docker ps</code> の結果を参照のこと。</p>

<p>最後の <code>bash</code> でBASHをログインシェルにしてログインすることを意味している。</p>

<p>実行したら普通のLinuxのようにコンテナ内をウロウロできたはずだ。</p>

<p>余談だが、<code>docker exec</code> はログインのためのものではなく、コンテナの任意のコマンドを実行できる命令である。つまり</p>

<p>```bash
$ docker exec -it trusting_cori cat /var/log/nginx/access.log</p>

<p>192.168.11.108 &ndash; &ndash; [21/Mar/2015:15:22:54 +0000] &ldquo;GET /favicon.ico HTTP/1.1&rdquo; 404 208 &ldquo;&ndash;&rdquo; &ldquo;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36&rdquo;
192.168.11.108 &ndash; &ndash; [21/Mar/2015:16:09:20 +0000] &ldquo;GET / HTTP/1.1&rdquo; 200 396 &ldquo;&ndash;&rdquo; &ldquo;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36&rdquo;
192.168.11.108 &ndash; &ndash; [21/Mar/2015:16:09:20 +0000] &ldquo;GET /favicon.ico HTTP/1.1&rdquo; 404 208 &ldquo;&ndash;&rdquo; &ldquo;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36&rdquo;
```</p>

<p>こんな風に外からログをみたりするのも簡単にできる。</p>

<h4>まとめ</h4>

<p>ここまでで、多分コピペするだけなら15分ぐらいでNginxをDockerコンテナ上に立てられたはずだ。なんて便利で簡単なんだと思った方もいるかも知れないが、<strong>甘い</strong>。</p>

<p>入門記事はこのエントリと同じぐらいの内容をサラッと書いてあることが多いと思うが、Dockerの本当の素晴らしさと苦しみはこの先にある。僕が本当に書きたかったエントリはそれである。そのエントリを書きたいがために、わざわざQiitaでも見りゃなんぼでも載っているような内容を書いたわけだ。</p>

<p>次のエントリは<strong>「Dockerは何であって何でないか」</strong>というようなエントリになるはずだ。</p>

<p>そのエントリでNginxの起動がなんで <code>CMD ["/usr/sbin/nginx", "-g", "daemon off;"]</code> みたいなけったいな方法なのか、Dockerコンテナにログインして <code>ps aux | grep nginx</code> とかしてみたら、なんでNginxのプロセスIDが1なのか、そういうことを書いていきたいと思う。</p>

<h4>参考書籍</h4>

<p><a href="http://www.amazon.co.jp/Docker%E5%85%A5%E9%96%80-Immutable-Infrastructure%E3%82%92%E5%AE%9F%E7%8F%BE%E3%81%99%E3%82%8B-%E6%9D%BE%E5%8E%9F%E8%B1%8A-ebook/dp/B00JWM4W2E">Docker入門 Immutable Infrastructureを実現する</a></p>

<p>少し情報が古くなってる部分があるけどこのエントリよりは200倍ぐらい網羅的に色んな事が解説されてるので600円の投資対効果はかなり高いと思う。何も知識のない人はひと通り読むといいかも。</p>
]]></content>
  </entry>
  
</feed>
