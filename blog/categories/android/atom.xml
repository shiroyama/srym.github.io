<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | do blog <- post]]></title>
  <link href="http://blog.shiroyama.us/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://blog.shiroyama.us/"/>
  <updated>2016-01-26T12:27:33+09:00</updated>
  <id>http://blog.shiroyama.us/</id>
  <author>
    <name><![CDATA[Fumihiko Shiroyama]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android で Either<L,R> を使おう]]></title>
    <link href="http://blog.shiroyama.us/blog/2015/08/10/either-in-android/"/>
    <updated>2015-08-10T21:45:49+09:00</updated>
    <id>http://blog.shiroyama.us/blog/2015/08/10/either-in-android</id>
    <content type="html"><![CDATA[<p>先日 <a href="http://blog.shiroyama.us/blog/2015/08/09/optional-in-android/" title="Android で Optional を使おう">Android で Optional を使おう</a> というエントリを書きました。</p>

<p><code>Optional&lt;T&gt;</code>ってのは <strong>値があるかないか</strong> を表現するって言いましたけど、あるメソッドが<code>Optional</code>で包んだ値<code>T</code>を返して来るってことは、言い換えると<code>Optional</code>は <strong>ある処理が成功したかまたは失敗した</strong> ことを表していると言えます。</p>

<p>しかしこれだと失敗したことは分かるけどその理由までは分からないですね。こういうときHaskellでは<code>Either</code>というデータ型を利用します。</p>

<p><code>haskell
Prelude&gt; :i Either
data Either a b = Left a | Right b
</code></p>

<p><code>Either</code>は <strong>失敗理由と成功データ</strong> の両方を表現するデータ型です。<br/>
<code>Left</code>が失敗、<code>Right</code>が成功に対応します。rightという単語の &ldquo;右&rdquo; と &ldquo;正しい&rdquo; の両方の意味が掛かった洒落ですね。これ、Androidにもあると便利なんですよ。</p>

<p>Javaでは伝統的に例外ケースはその名の通り &ldquo;例外&rdquo; で表現してきましたが、これは本質的に副作用です。それに微妙にRxJavaと相性が悪いです。</p>

<p>RxJavaでは複数の<code>Observable</code>をチェインさせてプロミス的な使い方をすることがままありますが、この間に起きた例外は<code>Subscriber</code>の<code>onError</code>に来ます。<br/>
しかし <strong>例外が発生したわけではないけど成功じゃないパターン</strong> って時々ありますよね。<br/>
んー例えば何でも良いんだけど、</p>

<ol>
<li>HTTP 200だけど<code>{'availability':false}</code>みたいなJSONでエラーを伝えてくるAPI</li>
<li>必要なパラメータが足りてない、形式が不正</li>
<li>2みたいなケースを<code>filter</code>オペレータで間引くんじゃなくてエラーは伝播させたい</li>
</ol>


<p>などなど。少なくとも自分はこういうときの銀の弾丸をまだ見つけられていません。</p>

<p>こういう時独自の例外を<code>throw</code>して<code>onError</code>で捕まえるのはあんまりしっくりきてません。<br/>
例外を単純な場合分けに使うのはいかにも筋が良くないし、そもそも<code>Observable</code>は<code>onComplete</code>か<code>onError</code>でそのライフサイクルを終えるので、復旧困難なケース以外でここに放り込むのは何か違う気がしてます。</p>

<p>これは<code>Either</code>を使うしかないでしょう！</p>

<h4>Either を作る</h4>

<p>Javaには<code>Either</code>なんてイカしたものは勿論ないので作るしかありませんが、「Java Either」とかでググると <a href="http://stackoverflow.com/questions/26162407/is-there-an-equivalent-of-scalas-either-in-java-8" title="Is there an equivalent of Scala's Either in Java 8?">Is there an equivalent of Scala&rsquo;s Either in Java 8?</a> なんてのがすぐに見つかります。</p>

<p>この例はJava8でしか動かせないのでAndroid用に書き換えたのが以下です。<br/>
一部うまく推論してくれないところがありましたが使わなそうなので無理に移植せず削除しました。</p>

<p>```java
package functional.data;</p>

<p>import com.eccyan.optional.Optional;</p>

<p>import rx.functions.Action1;
import rx.functions.Func1;</p>

<p>/<em>*
 * borrowed from <a href="http://stackoverflow.com/questions/26162407/is-there-an-equivalent-of-scalas-either-in-java-8">http://stackoverflow.com/questions/26162407/is-there-an-equivalent-of-scalas-either-in-java-8</a>
 </em>/
public final class Either&lt;L, R> {</p>

<pre><code>public static &lt;L, R&gt; Either&lt;L, R&gt; left(L value) {
    return new Either&lt;&gt;(Optional.of(value), Optional.empty());
}

public static &lt;L, R&gt; Either&lt;L, R&gt; right(R value) {
    return new Either&lt;&gt;(Optional.empty(), Optional.of(value));
}

private final Optional&lt;L&gt; left;
private final Optional&lt;R&gt; right;

private Either(Optional&lt;L&gt; l, Optional&lt;R&gt; r) {
    left = l;
    right = r;
}

public &lt;T&gt; Either&lt;T, R&gt; mapLeft(Func1&lt;? super L, ? extends T&gt; lFunc) {
    return new Either&lt;&gt;(left.map(lFunc), right);
}

public &lt;T&gt; Either&lt;L, T&gt; mapRight(Func1&lt;? super R, ? extends T&gt; rFunc) {
    return new Either&lt;&gt;(left, right.map(rFunc));
}

public void apply(Action1&lt;? super L&gt; lFunc, Action1&lt;? super R&gt; rFunc) {
    left.ifPresent(lFunc);
    right.ifPresent(rFunc);
}
</code></pre>

<p>}
```</p>

<p>早速自分のアプリに組み込んでみました。使い方はこんな感じです。<br/>
HaskellやScalaだと<code>Left</code>と<code>Right</code>でパターンマッチできるのですが、Javaだとそれも無理なので <code>Either#apply(leftラムダ式, rightラムダ式)</code> みたいな感じでお茶を濁していますね。</p>

<p>```java
@Bind(R.id.weatherInput)
EditText editTextCity;</p>

<p>@OnClick(R.id.submit)
void onClickSubmit(Button button) {</p>

<pre><code>WeatherApiCreator.create(CurrentWeatherService.class).getByCityName(editTextCity.getText().toString())
        .map(currentWeatherResponse -&gt; {
            Either&lt;Throwable, String&gt; either;
            if (currentWeatherResponse.getCode() != 200) {
                either = Either.left(new RuntimeException("error code: " + currentWeatherResponse.getCode()));
            } else {
                either = Either.right("Humidity: " + currentWeatherResponse.getMain().getHumidity());
            }
            return either;
        })
        .subscribeOn(Schedulers.newThread())
        .observeOn(AndroidSchedulers.mainThread())
        .subscribe(
                either -&gt; either.apply(
                        left -&gt; Toast.makeText(this, left.getMessage(), Toast.LENGTH_SHORT).show(),
                        right -&gt; Toast.makeText(this, right, Toast.LENGTH_SHORT).show()
                ),
                error -&gt; Toast.makeText(this, error.getMessage(), Toast.LENGTH_SHORT).show()
        );
</code></pre>

<p>}
```</p>

<p>もうひとつ大事なことがあります。 <strong>Eitherは写像を作る※</strong> ことができます。<br/>
以下の例をみてください。</p>

<p>```java
.map(currentWeatherResponse &ndash;> {</p>

<pre><code>Either&lt;Throwable, String&gt; either;
if (currentWeatherResponse.getCode() != 200) {
    either = Either.left(new RuntimeException("error code: " + currentWeatherResponse.getCode()));
} else {
    either = Either.right("Humidity: " + currentWeatherResponse.getMain().getHumidity());
}
return either;
</code></pre>

<p>})
.map(either &ndash;> either.mapRight(String::toUpperCase))
.subscribeOn(Schedulers.newThread())
.observeOn(AndroidSchedulers.mainThread())
.subscribe(</p>

<pre><code>    either -&gt; either.apply(
            left -&gt; Toast.makeText(this, left.getMessage(), Toast.LENGTH_SHORT).show(),
            right -&gt; Toast.makeText(this, right, Toast.LENGTH_SHORT).show()
    ),
    error -&gt; Toast.makeText(this, error.getMessage(), Toast.LENGTH_SHORT).show()
</code></pre>

<p>```</p>

<p>この例だと、処理が成功していれば結果をすべて大文字に変換しています。例があまりにもしょうもなくて申し訳ないです！</p>

<p>重要なのは、途中で処理が成功していようが失敗していようが気にせず <code>mapRight</code> でRightを写すことができている点です。<br/>
処理が途中で失敗しても、Rightは空っぽなので変換処理は単に空振りして、LeftはLeftのまま伝播するという寸法です。</p>

<p>言いたいこと伝わりますかね？ <strong>利用者が isRight とか isLeft とか判定してるようじゃ意味が無い</strong> のです。</p>

<h4>Either 右翼？</h4>

<p>以下、余談です。</p>

<p>上で僕は <strong>Eitherは写像を作ることができる</strong> と言いましたが、この例だとそれが嘘であることが識者にはバレバレだと思います。端的に言うと上のような<code>Either</code>は <strong>モナドじゃありません。</strong><br/>
Either自体はmapで写すことができておらず <code>mapRight</code>, <code>mapLeft</code> なんていう方法でそれぞれを操作しています。</p>

<p>こういうのは、LeftとRightを対等に扱ったEitherとか言われるみたいです。Scalaの標準ライブラリのEitherや上のJavaのコードなんかがその例です。</p>

<p>対して、HaskellやScalazのEitherは <strong>Right-Biased Eitehr</strong> とか呼ばれています。右寄りの、右派のっていう意味です。EitherをそもそもRightのコンテナとして利用しようという考え方です。<br/>
このようなEitherはRight値をひとつ包むモナドのように動作します。また、LeftとRightを結合するといかなる場合もLeftになります。</p>

<p>Androidで利用できるRight-BiasedなEitherは夏休みの自由研究にでもしようかと思います。それでは。</p>

<h5>参考リンク</h5>

<ul>
<li><a href="http://slides.pab-tech.net/either-and-validation/#1" title="EitherとValidation">EitherとValidation</a></li>
<li><a href="http://tech.recruit-mp.co.jp/server-side/post-2540/" title="Scalazを使おう #1">Scalazを使おう #1</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android で Optional<T> を使おう]]></title>
    <link href="http://blog.shiroyama.us/blog/2015/08/09/optional-in-android/"/>
    <updated>2015-08-09T22:09:12+09:00</updated>
    <id>http://blog.shiroyama.us/blog/2015/08/09/optional-in-android</id>
    <content type="html"><![CDATA[<p><a href="http://shibuya-apk.connpass.com/event/16640/" title="Shibuya.apk #2">Shibuya.apk #2</a> というイベントで登壇させていただきました。資料は<a href="http://www.slideshare.net/fumihikoshiroyama/rxjavaoptionalandroid" title="RxJavaとOptionalで関数型Androidしよう">ここ</a>にあります。<br/>
テーマは「RxJavaとOptionalで関数型Androidしよう」ですが昨今の巷での関数型言語の流行りに便乗した釣りタイトルです。誠に申し訳ございません。<br/>
で、そのテーマの前半部分である <code>Optional&lt;T&gt;</code> についてここで詳しくまとめておきたいと思います。</p>

<h3>Optionalとは何か</h3>

<p>Optional とは <strong>あるかもしれないしないかもしれない</strong> ものを表現する型です。<br/>
Haskell でいう <code>Maybe a  =  Nothing | Just a</code> です。Scalaでいう <code>Option[T] = Some(T) | None</code> です。<br/>
<code>Optional&lt;String&gt;</code> ってのがあると、文字列があるかもしれないしないかもしれないって意味になります。</p>

<p>これの何が嬉しいかっつーと <code>if (str != null &amp;&amp; !TextUtils.isEmpty(str))</code> みたいなつまらないボイラープレートを書かなくて済むんですよ。<br/>
あと、これが一番大事なので最初に書くけど、 <strong>Optionalの中身があるかどうか気にせずOptionalをmapで写したりできる</strong> んです。これは死ぬほど大事なので後でコード例とともに示します。<br/>
あとはまあ、 <code>Optional&lt;T&gt;</code> って書いとくと <strong>ああこれは中身がnullになりうるんだな</strong> ってことが仕様としてハッキリします。これはドキュメントに書くより、<code>@Nullable</code> 修飾するより強力です。</p>

<h3>AndroidはJava8使えない</h3>

<p>Java8からは <code>Optional&lt;T&gt;</code> が使えます。Java8ではラムダ式だとか関数クラス型だとかStream APIとかが追加されてますが、個人的にはOptionalが最も大切です。<br/>
で、御存知の通りAndroidは未だにJava6互換でいくつかJava7のAPIが使えるにとどまっており、非常にレガシーな書き方を余儀なくされます。とても悲しい。</p>

<p>ところが、私の敬愛するsys1yagiさんという方の <a href="http://sys1yagi.hatenablog.com/entry/2015/01/26/183000" title="RxJavaのObservable&lt;T&gt;でOptional&lt;T&gt;を代行する">RxJavaのObservable<T>でOptional<T>を代行する</a> という神のようなブログエントリでAndroidでもOptionalが使えることが示されました。</p>

<p>当該エントリをそのままコピペしてもほとんど申し分ないOptionalが扱えるのですが、一部RxJavaのObservableがむき出しになっており、RxJava内でOptionalを取り回したいときにちょっと見た目がわかりづらくなるので完全にOptionalという名前でラップしたライブラリを自作しようとしたところ、なんと既にありました。<a href="https://github.com/eccyan/RxJava-Optional" title="eccyan/RxJava-Optional">eccyan/RxJava-Optional</a> です。作者さま本当にありがとうございます。</p>

<h3>AndroidでOptional早速使おう</h3>

<p>gradleで入れられます。</p>

<p><code>
compile 'io.reactivex:rxandroid:0.25.0'
compile 'com.eccyan:rxjava-optional:1.1.2'
</code></p>

<p>バージョンに注意してください。公式のREADMEだと<code>1.1.0</code>になってるのですが、このバージョンだとAPIレベル19以降でしか使えない<code>Objects.requireNonNull</code>がそのまま使われており、古いAndroidで動きません。<br/>
<code>1.1.2</code>では自作のObjectsクラスがバンドルされており古いAndroidでもちゃんと動きます。</p>

<p>インストールできたら早速使いまくりましょう。</p>

<p>なお、以下の例ではラムダ式が出てきまくりますが、これは<code>Retrolambda</code>というライブラリとAndroid Studioのプラグインを組み合わせて使ってます。<br/>
インストール方法がちょっとややこしいので別エントリにまとめ次第追記します。</p>

<h4>Optionalでくるむ</h4>

<p>まずOptionalを使うポイントですが、前述のとおりあるかもしれないしないかもしれないところで使います。<br/>
具体的に言うと、関数の最後で <code>Map#get</code> だとか <code>String#indexOf</code> の結果を戻してるような箇所はOptionalで包む格好の場所だと思います。</p>

<p>値をOptinalで包むメソッドは3つ用意されてます。</p>

<ul>
<li><code>Optional.of(T)</code></li>
<li><code>Optional.ofNullable(T)</code></li>
<li><code>Optional.empty()</code></li>
</ul>


<p><code>Optional.of(obj)</code> はobjがnullだった場合にぬるぽを投げます。対して、<code>Optional.ofNullable(obj)</code> はnullかも知れないobjも安心して包めます。<br/>
だからと言って <strong>ofNullabeを毎回使いましょう</strong> みたいなルールにしちゃダメですよ。<br/>
nullじゃないことが明らかな場合、またはnullであっちゃならない場所では<code>of</code>を使うべきです。なぜなら本来nullであってはならない場所ならその場でぬるぽで落ちるべきであるからです。</p>

<p>nullでないのが明らかなら<code>T</code>でいいじゃんという声もありそうですが、戻り値としては<code>Optional&lt;T&gt;</code>を返したいというのとその場でobjがnullでないことが明らかというのはまた別の話です。</p>

<p>話がそれましたが、<code>Optional.empty()</code> は <code>Optional.ofNullable(null)</code> と同じことです。</p>

<h4>Optionalから値を取り出す</h4>

<p>Optionalから値を取り出します。ホントは<code>map</code>とかが一番重要なんですが、後に譲ります。</p>

<ul>
<li><code>Optional#get()</code></li>
<li><code>Optional#orElse(T)</code></li>
<li><code>Optional#orElseCall(() -&gt; {T})</code></li>
<li><code>Optional#orElseThrow(() -&gt; {Throwable})</code></li>
</ul>


<p><code>Optional#get()</code> は中身がnullのときは<code>NoSuchElementException</code>が投げられます。これはぬるぽを踏むのと一緒であんま意味がないので僕は使ったことないです。</p>

<p><code>Optional#orElse(T)</code> は中身がnullのときに引数で与えた値が取り出せます。<code>map</code>と組み合わせて死ぬほど使うので覚えておいてください。</p>

<p><code>Optional#orElseCall(() -&gt; {T})</code> は<code>orElse</code>に似てますが、中身がnullのときに初めてラムダ式が評価されてその結果が取り出せます。引数が遅延評価されるのでより関数型っぽいですね。初期化処理がコスト高い場合なんかはこっちを使うと良いかもしれません。</p>

<p><code>Optional#orElseThrow(() -&gt; {Throwable})</code> は中身がnullのときはラムダ式で作られた例外が投げられます。<br/>
Optionalを何回も<code>map</code>や<code>filter</code>して最終的に中身がなかったら例外を上げるっていうケース、時々あるような気がするので何回か使った記憶がありますが、それでも<code>orElse</code>を使う頻度よりはるかに少ないはずです。<br/>
もし<code>orElseThrow</code>をどこででも使ってるとしたらそれはなんかOptionalを誤解してる気がします。普通にTを返すメソッドを<code>throws HogeException</code>してください。</p>

<h4>Optionalをモナドとして使うよ</h4>

<p>冒頭で <strong>Optionalは中身があるかどうか気にせずOptionalのままmapで写したりできる</strong> って書きました。これめっちゃ大事なことなんですよ。</p>

<p>たとえば、<code>Optional#isPresent()</code> っていう、中身の値があるかどうか調べるメソッドがあるんですが、ちょっと下のコード見てください。</p>

<p><code>java
if (opt.isPresent()) {
   String val = opt.get();
}
</code></p>

<p>これ何の意味があるんでしょうか。これ今までの退屈なnullチェックと同じですよね。Optional使った意味全くないですよね。なのでこれは最悪です。こんなの書かないようにしてください。</p>

<p>Optionalは下みたいなクールな方法で扱います。</p>

<ul>
<li><code>Optional#ifPresent(値を消費するラムダ式)</code></li>
<li><code>Optional#map(TをUに写すラムダ式)</code></li>
<li><code>Optional#flatMap(TをOptional&lt;U&gt;に写すラムダ式)</code></li>
<li><code>Optional#filter(Tを新しいTに写すときの条件を示すラムダ式)</code></li>
</ul>


<h5>Optional#ifPresent</h5>

<p><code>ifPresent</code>はOptionalの中身があったときだけ引数のラムダ式を実行してくれます。</p>

<p><code>java
Optional&lt;String&gt; strOpt = Optional.of("V8!!!");
strOpt.ifPresent(s -&gt; Log.i(TAG, s));
</code></p>

<p>これはもう見ての通りです。注意点は、<code>ifPresent</code>は <strong>値を返す式ではない</strong> ということです。そういう場合は後述の<code>map</code>を使います。</p>

<h5>Optional#map</h5>

<p><code>map</code>は元のOptionalに包まれた<code>&lt;T&gt;</code>の値を、新しい<code>&lt;U&gt;</code>に写します。要するに変換です。</p>

<p>```java
Optional<String> strOpt = Optional.of(&ldquo;123&rdquo;);
strOpt.map(s &ndash;> Integer.valueOf(s)) // strOpt.map(Integer::valueOf) とも書けるよ！</p>

<pre><code>  .ifPresent(i -&gt; Log.i(TAG, "i: " + i));
</code></pre>

<p>```</p>

<p>上記は分かりやすさのためにほとんど意味のないコードですが、何かエンティティ（例えばユーザ情報）を<code>map</code>してユーザ名だけの圏を得たりするのは非常によくする操作なんじゃないでしょうか。</p>

<p><code>map</code>に<code>orElse</code>をつなぐと例外処理など使わずとも上から下までOptionalとその写像だけを連ねた結果をエレガントに扱うことができますよ。</p>

<p>```java
int result = Optional.ofNullable(strNullable)</p>

<pre><code>                 .map(Integer::valueOf)
                 .orElse(123);
</code></pre>

<p>```</p>

<p>この例はしょうもなさすぎてエレガントとは言い難いですがね！けどアイディアは伝わるでしょう。<code>map</code>はいくら連ねてもいいんですよ。</p>

<h5>Optional#flatMap</h5>

<p><code>flatMap</code>はOptionalで包まれた値を次に渡すときに使います。ちょっと分かりづらいという人も居ますが、簡単ですよ。<br/>
<code>map</code>が<code>T</code>から<code>U</code>を写すのに使う、つまり<code>map</code>の返り値は値型そのものなんですが、既に<code>Optional&lt;U&gt;</code>を返す関数とかがあるときにそれをそのまま使っちゃうと<code>Optional&lt;Optional&lt;U&gt;&gt;</code>が写されちゃうんで、それが適切でないときに<code>flatMap</code>でぺしゃんこにします。flatten（=平らにする）して（map=写す）だけです。</p>

<p>```java
Optional<Token> tokenOpt = getToken();
tokenOpt.flatMap(token &ndash;> someApiCall(token, args))</p>

<pre><code>    .ifPresent(apiResult -&gt; processApiResult(apapiResult)); // this::processApiResult とも書けry
</code></pre>

<p>```</p>

<p>こんな感じ。<br/>
この例でいうと<code>someApiCall</code>は<code>Optional&lt;ApiResult&gt;</code>を返すので、そのままだと<code>ifPresent</code>に<code>Optional&lt;Optional&lt;ApiResult&gt;&gt;</code>が渡ってしまうので<code>flatMap</code>でぺったんこにしています。ぺったんこの意図するところ、伝わりますかね。</p>

<h5>Optional#filter</h5>

<p>最後に<code>filter</code>です。これは例を見てもらうと簡単です。</p>

<p>```java
Optional.of(123)</p>

<pre><code>    .filter(i -&gt; i &gt; 100)
    .orElse(100);
</code></pre>

<p>```</p>

<p><code>filter</code>に渡すラムダ式は値を受け取って真偽値を返すようなものを渡します。真になったものだけ生き残るというわけです。</p>

<h4>まとめ</h4>

<p>この通り、Java8のOptionalとほぼ遜色のないコードを書けることが分かると思います。正しく使う限りデメリットが見当たらないのでぜひ使うことをおすすめしたいです。</p>

<p>本エントリでは触れませんが、この代用版OptionalとRxJava/RxAndroidは組み合わせて使うとめっちゃ強力です。（元々同じものなんですけどね）<br/>
機会があったらその辺も書こうかなと思います。では。</p>

<h4>参考リンク</h4>

<ul>
<li><a href="http://sys1yagi.hatenablog.com/entry/2015/01/26/183000" title="RxJavaのObservable&lt;T&gt;でOptional&lt;T&gt;を代行する">RxJavaのObservable<T>でOptional<T>を代行する</a></li>
<li><a href="http://www.ne.jp/asahi/hishidama/home/tech/java/optional.html" title="Java Optionalメモ(Hishidama's Java8 Optional Memo) ">Java Optionalメモ(Hishidama&rsquo;s Java8 Optional Memo) </a></li>
<li><a href="http://irof.hateblo.jp/entry/2015/05/05/071450" title="Optionalの取り扱いかた">Optionalの取り扱いかた</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DroidKaigiで登壇してきました]]></title>
    <link href="http://blog.shiroyama.us/blog/2015/04/25/droidkaigi/"/>
    <updated>2015-04-25T22:31:22+09:00</updated>
    <id>http://blog.shiroyama.us/blog/2015/04/25/droidkaigi</id>
    <content type="html"><![CDATA[<p><a href="http://droidkaigi.github.io/" title="DroidKaigi 2015">DroidKaigi 2015</a>で登壇する幸運にあずかりました。</p>

<p>DroidKaigiはAndroidデベロッパによるAndroidデベロッパのためのカンファレンスとして企画・開催されました。いかなる企業や団体、利権とも無縁の純粋なるAndroidハッカーのためのイベントです。<br/>
自分としてもDroidKaigiの趣旨に大きく賛同するものであり、企画してくださった <a href="https://twitter.com/mhidaka" title="@mhidaka">@mhidaka</a> 氏ならびに運営のみなさんには本当に感謝しています。</p>

<p>何とか発表したかったので <a href="https://docs.google.com/spreadsheets/d/186-gpTHPvGwtQTFqvuSs10Tz3ca49gKNZ7uoRSi2HnE/edit#gid=0" title="Call For Papers">Call For Papers</a> に5つぐらい応募したところ、情熱が届いたのか <a href="http://www.slideshare.net/fumihikoshiroyama/ss-47472394" title="絶対落ちないアプリの作り方">絶対落ちないアプリの作り方</a> を採択していただきました。名だたる大企業の有名デベロッパひしめく中、無名な自分の論文を採用してくださったことは本当に感激でした。</p>

<p>DroidKaigiは募集開始5分で先着枠200人が埋まり、抽選枠200人も455人の応募があるという大盛況ぶりで、当日も欠席者がほとんどなく会場の椅子という椅子がびっしり埋まるという賑わいでした。Android開発者もこういった「開発のみ」にフィーチャーしたカンファレンスを熱望していたことが見て取れます。</p>

<p>こうした中で発表するのはホビットの心臓を持つ自分としては生きた心地がしませんでしたが、非常に良い経験になりました。発表資料の難易度、資料の作り込み、発表の時間配分等々含めて反省点は多く残りましたが後悔はしていません。2016, 2017年と毎年開催されて欲しいですし、毎年刺激的な論文を応募し続けようと思います。</p>

<p>自分で言うと思いあがりも甚だしいですが、ここ半年ぐらい、だいたいAndroidでやりたいことはやり尽くした感があってiOS開発に手を出したりしていたのですが、DroidKaigiで改めてAndroidそのものに対する愛が深まりました。Androidは単なるハッカーのおもちゃから大きく飛躍し、今まさに円熟期を迎えています。Androidの最初期には乗り遅れたものの、Android1.5から成長を見届けてきたひとりとして、これからもAndroidと一緒に成長していこうと思いました。</p>

<p>それから、2015年にAndroid開発を始める人向けに最新の開発エッセンスを詰め込んだ記事なり勉強会なりを初めて行きたいなと考えています。まずは身内から始めていきますが、社外にもそういった需要がありそうなら公開イベントとしてやっていこうと思っているのでTwitterなりで気軽に話しかけていただければと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion for Android でカスタム Appliation クラスを利用する]]></title>
    <link href="http://blog.shiroyama.us/blog/2014/10/03/rubymotion-android-custom-application-class/"/>
    <updated>2014-10-03T21:16:29+09:00</updated>
    <id>http://blog.shiroyama.us/blog/2014/10/03/rubymotion-android-custom-application-class</id>
    <content type="html"><![CDATA[<p><a href="http://www.rubymotion.com/" title="RubyMotion">RubyMotion</a> のバージョンが 3.1 になり、Android 版でカスタム Application クラスが利用できるようになった。</p>

<p>実を言うとこれまでは独自定義の Application クラスを利用することが出来なかったのだが、その旨 RubyMotion のサポートで質問したところ、作者の Laurent さんが一瞬で対応してくれたのだ。<br/>
<strong>なんてCOOLなんだ！みんなも RubyMotion を買おう！</strong></p>

<p>では早速、独自 Application クラスの使い方を簡単に紹介しておく。RubyMotion for Android の入門に関しては前回書いた<a href="http://blog.shiroyama.us/blog/2014/09/20/rubymotion-for-android/" title="RubyMotion for Android を使ってみる">拙エントリ</a>を参考にして欲しい。</p>

<h4>1) RubyMotion を更新</h4>

<p>以下のコマンドで更新。<code>--pre</code> を忘れないようにしよう</p>

<p>```bash
% sudo motion update &mdash;pre</p>

<p>Password:
Connecting to the server&hellip;
Downloading software update&hellip;</p>

<h6>################################################################## 100.0%</h6>

<p>Installing software update&hellip;
RubyMotion pre-release update installed in /Library/RubyMotionPre</p>

<p>= RubyMotion 3.1 =</p>

<ul>
<li>Added the RUBYMOTION_VERSION and RUBYMOTION_ENV constants, which have the
same values as RubyMotion for iOS / OS X.</li>
<li>Added support for the Android R class. Thanks to Mark Villacampa for the
patch.</li>
<li>Added the `app.application_class' setting, which can be used to specify
the name of a custom Android::App::Application subclass that should be used
by the application. By default, the variable has a nil value, which means
a default class will be used.</li>
<li>Improved app versioning. <code>app.api_version' will now map to the
</code>minSdkVersion' manifest attribute. Added <code>app.target_api_version' which
will map to</code>targetSdkVersion'. Both settings will have the latest API
version as the default value, except for 20 (L). We recommend that you
leave <code>app.target_api_version' intact and only modify</code>app.api_version'.</li>
<li>Improved the REPL so that &ldquo;self&rdquo; now always points to the current app
activity. (Only works for API 14 or above.)</li>
<li>Added support for `&amp;foo' constructs (which should dispatch #to_proc).</li>
<li>Added Symbol#to_proc.</li>
<li>Fixed a bug where `app.vendor_project' would generate a .bridgesupport
file containing illegal XML characters (such as &lsquo;&lt;&rsquo; or &lsquo;>&rsquo;) inside
attributes. Thanks to Mark Villacampa for the patch.</li>
<li>Fixed a bug where the dispatch of an overloaded Java method without
arguments would fail. The runtime will now return the first method of the
list (since we can&rsquo;t match any argument).</li>
<li>Fixed the `rake {emulator,device}&lsquo; tasks to terminate the application in
case the user leaves the REPL session.</li>
<li>Fixed a bug when dispatching certain methods using reflection (REPL) that
return java.lang.Object.</li>
<li>Fixed a bug in the compiler where a crash would happen when trying to
override a Java method accepting a Java array as argument.</li>
<li>Fixed a bug in the dispatcher when yielding certain runtime-generated
blocks (ex. enumerators) where the return value would be destroyed.
```</li>
</ul>


<h4>2) カスタム Application クラスを準備</h4>

<p>Android 用のテンプレートを生成し、</p>

<p><code>bash
% motion create --template=android Hello
% cd ./Hello
</code></p>

<p>Android::App::Application クラスを継承した独自 Application クラスを定義する。</p>

<p>試しに onCreate(), onTerminate() でログを出すようにしてみた。<br/>
※ onTerminate() は<a href="http://developer.android.com/reference/android/app/Application.html#onTerminate()">実機では呼ばれない</a>ので注意。理解の便宜上書いてみた。</p>

<p>```ruby
% vim app/my_application.rb</p>

<p>class MyApplication &lt; Android::App::Application
  def onCreate()</p>

<pre><code>super
puts "Application#onCreate()"
</code></pre>

<p>  end</p>

<p>  # will never be called on a production Android device
  def onTerminate()</p>

<pre><code>super
puts "Application#onTTerminate()"
</code></pre>

<p>  end
end
```</p>

<h4>3) Rakefile を修正</h4>

<p><code>app.application_class</code> に独自定義の Application クラスを指定</p>

<p>```ruby
% vim Rakefile</p>

<h1>&ndash;<em>&ndash; coding: utf-8 &ndash;</em>&ndash;</h1>

<p>$:.unshift(&ldquo;/Library/RubyMotionPre/lib&rdquo;)
require &lsquo;motion/project/template/android&rsquo;</p>

<p>Motion::Project::App.setup do |app|
  # Use `rake config' to see complete project settings.
  app.name = &lsquo;Hello&rsquo;
  app.application_class = &lsquo;MyApplication&rsquo;
end
```</p>

<p>最初どんなプロパティか分からなくて戸惑ったけど <code>/Library/RubyMotionPre/lib/motion/project/template/android.rb</code> みたらすぐ分かった。</p>

<h4>4) 確認</h4>

<p>確認してみよう！</p>

<p>```bash
% rake device</p>

<pre><code>Create ./build/Development-19/classes.dex
Create ./build/Development-19/Hello.apk
  Sign ./build/Development-19/Hello.apk
 Align ./build/Development-19/Hello.apk
</code></pre>

<p>   Install ./build/Development-19/Hello.apk
4066 KB/s (638813 bytes in 0.153s)</p>

<pre><code> Start com.yourcompany.hello/.MainActivity
</code></pre>

<p>&mdash;&mdash;&mdash;&mdash;&ndash; beginning of /dev/log/main
&mdash;&mdash;&mdash;&mdash;&ndash; beginning of /dev/log/system</p>

<p>I/com/yourcompany/hello(11394): Application#onCreate()
```</p>

<p>一番下の行に注目！Application の開始時に一度だけ出ている！</p>

<p>前述のとおり onTerminate() は実機では呼ばれないが仕様なので気にしないでください。</p>

<h3>まとめ</h3>

<p>独自 Application クラスを利用できるようになったことで実戦的なアプリ開発の可能性がグッと広がったように思う。<br/>
ライブラリの初期化とか、静的 Context 取得メソッドとか、アプリケーションライフサイクルで管理する Observer とか、実際の Android 開発では利用シーンの枚挙にいとまがない。</p>

<p>いよいよ次回は少し実戦的なアプリを実装して GitHub に上げてその記事を書こうと思う。それでは楽しい RubyMotion ライフを！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion for Android を使ってみる]]></title>
    <link href="http://blog.shiroyama.us/blog/2014/09/20/rubymotion-for-android/"/>
    <updated>2014-09-20T15:53:05+09:00</updated>
    <id>http://blog.shiroyama.us/blog/2014/09/20/rubymotion-for-android</id>
    <content type="html"><![CDATA[<p>9/16日、<a href="http://blog.rubymotion.com/post/97668474211/announcing-the-public-beta-of-rubymotion-for-android" title="公式ブログ">RubyMotion が Android に対応し public Beta として公開された。</a></p>

<p>9/18〜20まで開催された <a href="http://rubykaigi.org/2014/" title="RubyKaigi 2014">RubyKaigi 2014</a> でも <a href="http://rubykaigi.org/2014/presentation/S-LaurentSansonetti" title="Inside RubyMotion for Android">RubyMotion for Android に関するセッション</a> があり、かなり感銘を受けたのでブログにまとめることにする。</p>

<h3>RubyMotion とは何か</h3>

<p>すごく簡単に言うと iOS や OSX, そして Android のネイティブアプリを Ruby で書けるというツール群である。</p>

<p><a href="http://www.rubymotion.com/">http://www.rubymotion.com/</a></p>

<p>Titanium や PhoneGap とは明確に異なり、各ランタイムが直接解釈できるネイティブコードを生成するのが特徴。従ってパフォーマンス的なオーバーヘッドがほとんどなく ※1 、利用できる OS の API にも基本的に制限がない。</p>

<p>何より Ruby で書けるのである。なんて素晴らしいんだ。</p>

<h3>利用方法</h3>

<p>公式サイトの英語を読むのがめんどくさい人のために2014年9月時点でのライセンス形態等について箇条書きしておく。</p>

<ul>
<li><strong>有料。</strong>199.99ドル

<ul>
<li>1年間のバグフィクス・改良などのアップデートを受けられる</li>
<li>1年間のサポートのためのプライベートチケットを切ることができる</li>
<li>自分の理解では1度買えば1年経つとアップデートは受けられないがそのまま使い続けられる</li>
</ul>
</li>
<li>30日間はトライアル期間として気に入らなければいつでもやめることができる</li>
<li>今は学割的なものはない</li>
<li>1年経つと99.99ドルで（アップデート等の）ライセンスを延長できる</li>
<li>言い忘れたけど OSX の動く Mac が必要なのでそれ以外の環境の方は残念</li>
</ul>


<p>これを高いと見るか安いと見るかは価値観次第だと思うが、トライアル期間があるので少しでも興味がある人は一度試してみると良いと思う。（最初にカードを登録する必要あり。30日以内のキャンセルは &ldquo;返金扱い&rdquo; なのかそれとも &ldquo;30日後に初めて課金される&rdquo; のかは知らない。興味もない）</p>

<h3>使ってみる</h3>

<p><a href="http://sites.fastspring.com/hipbyte/product/rubymotion" title="公式サイト">公式サイト</a> から早速購入してみよう。RubyKaigi 期間中はなんと15%オフ（毎年恒例らしい）なのだが、ブログにまとめるのをモタモタしているうちに閉会してしまった…</p>

<p><img src="/images/rubymotion/rubymotion01.jpg" title="&lsquo;buy rubymotion&rsquo; &lsquo;buy rubymotion&rsquo;" ></p>

<p>購入し終わると登録したメールアドレス宛にライセンスキーとインストーラのダウンロードリンクが届く。 ダウンロードリンクは忘れがちなのでメールは保存しておこう。</p>

<p>ダブルクリックして指示に従っていると何の問題もなくインストールは完了する。</p>

<p>Xcode や AndroidStudio と違い、専用の（エディタを含んだ GUI の）IDE 環境がインストールされる訳ではない。RubyMotion は CUI のビルドツール群という印象に近い。</p>

<p>ツール群は</p>

<p><code>bash
% /Library/RubyMotion/
</code></p>

<p>以下にインストールされ、最も使われる（というかこれしか使ったことがない）motion コマンドは</p>

<p><code>bash
% /usr/bin/motion
</code></p>

<p>にリンクされる。普通にしているとここにはパスが通っているはずなのでコンソールで motion とタイプするだけですぐに利用できるはずだ。</p>

<h3>Hello from RubyMotion for Android</h3>

<p>それでは RubyMotion for Android を使って Hello World をしてみよう。<br/>
<a href="http://www.rubymotion.com/developer-center/guides/getting-started/#_android" title="Getting Started">公式の Getting Started をなぞるだけ</a> で実に簡単に動かすことができるが、例によって英語の説明を読みたくない人のために箇条書きにする。</p>

<h4>1. プレビュー版をインストール</h4>

<p>今日時点で Android 版は public Beta という扱いなので、標準のコンポーネントには含まれていない。以下のコマンドでインストールする。</p>

<p><code>bash
% sudo motion update --pre
</code></p>

<p>ファイルは以下のパスにインストールされるが普通に使っている限り意識することはない。</p>

<p><code>bash
% /Library/RubyMotionPre
</code></p>

<h4>2. JDK をインストール</h4>

<p>JDK 6 をインストールする必要がある。</p>

<blockquote><p>7でも動くけど6を推奨</p></blockquote>

<p>みたいなこと書いてあるけど、<strong>7だと動かない場合があった</strong> ※2 ので言うとおりにすることを強くおすすめする。</p>

<p>OpenJDK か Oracle の JDK か、みたいなことは書いてないが、公式サイトからは <a href="http://support.apple.com/kb/DL1572" title="Java for OSX 2014-001">Apple の Java for OSX 2014-001</a> というのにリンクが張ってあったので素直にこれを入れると良いだろう。</p>

<p>Mac に複数の JDK が入っている場合はやっかいで、僕の知る限り Java には rbenv 的なランタイムのバージョン管理とサンドボックス化を提供してくれる仕組みはない（最近の言語でこういった仕組みがない言語の方がむしろ珍しいよね…まったくトホホだ）ので、自分で JAVA_HOME を変えてやる必要がある。</p>

<p><code>bash
% ls -l /System/Library/Frameworks/JavaVM.framework/Versions
</code></p>

<p>とかしてみて、<strong>1.6</strong> がある且つ複数のバージョンが入っているようなら .zshrc とかに</p>

<p><code>``bash
% cat&lt;&lt;'EOS'&gt;&gt;~/.zshrc
export JAVA_HOME=</code>/System/Library/Frameworks/JavaVM.framework/Versions/A/Commands/java_home -v &ldquo;1.6&rdquo;`
PATH=${JAVA_HOME}/bin:${PATH}
EOS</p>

<p>% source ~/.zshrc</p>

<p>% java -version
java version &ldquo;1.6.0_65&rdquo;
Java&trade; SE Runtime Environment (build 1.6.0_65-b14-466.1-11M4716)
Java HotSpot&trade; 64-Bit Server VM (build 20.65-b04-466.1, mixed mode)
```</p>

<p>のようにして java 1.6 が使われていることを確認しておこう。<a href="http://qiita.com/ringo/items/db58b34dc02a941b297f" title="OSXでJavaのバージョンを切り替える">この Qiita</a> を参考にすると良い。</p>

<h4>3. Androiid SDK をインストール</h4>

<p>公式サイトの例に従い、まずは RubyMotion for Android の作業ディレクトリを作成する。</p>

<p><code>bash
% mkdir ~/android-rubymotion
</code></p>

<p>次に公式サイトでは <a href="http://developer.android.com/sdk/index.html" title="Eclipse ADT">Eclipse ADT</a> をインストールしてその sdk をコピーするように書いてあるが、今更 Eclipse を使っている人も居ないと思うので <a href="https://developer.android.com/sdk/installing/studio.html" title="Android Studio">Android Studio</a> の sdk をシンボリックリンクで利用すると良い。SDK さえ入れられれば方法は問わない。 ※3</p>

<p><code>bash
% cd ~/android-rubymotion
% ln -s /Applications/Android\ Studio.app/sdk sdk
% ls sdk/
add-ons        build-tools    docs           extras         platform-tools platforms      samples        sources        system-images  temp           tools
</code></p>

<h4>4. Androiid NDK をインストール</h4>

<p>ネイティブコンパイルのために <a href="https://developer.android.com/tools/sdk/ndk/index.html" title="Android NDK">Mac OS X 64-bit NDK for 32-bit target</a> を入れる必要がある。</p>

<p>間違えやすいが、必ず <strong>Platform (32-bit target)</strong> かつ <strong>Mac OS X 64-bit</strong> の NDK でなくてはならない。さもなくば動かない旨明記してある。</p>

<p>ダウンロードしたら展開して sdk と同じディレクトリにコピーする。</p>

<p><code>bash
% tar jxvf android-ndk32-r10b-darwin-x86_64.tar.bz2
% cp -r android-ndk-r10 ~/android-rubymotion/ndk
% cd ~/android-rubymotion
% ls ndk/
GNUmakefile               build                     find-win-host.cmd         ndk-depends               ndk-gdb-py.cmd            ndk-which                 remove-windows-symlink.sh tests
README.TXT                docs                      ndk-build                 ndk-gdb                   ndk-gdb.py                platforms                 samples                   toolchains
RELEASE.TXT               documentation.html        ndk-build.cmd             ndk-gdb-py                ndk-stack                 prebuilt                  sources
</code></p>

<p>最後に SDK と NDK を環境変数に登録する。</p>

<p>```bash
% cat&lt;&lt;&lsquo;EOS&rsquo;>>~/.zshrc
export RUBYMOTION_ANDROID_SDK=~/android-rubymotion/sdk
export RUBYMOTION_ANDROID_NDK=~/android-rubymotion/ndk
EOS</p>

<p>% source ~/.zshrc</p>

<p>% env | grep RUBYMOTION_ANDROID
RUBYMOTION_ANDROID_SDK=/Users/shiroyama/android-rubymotion/sdk
RUBYMOTION_ANDROID_NDK=/Users/shiroyama/android-rubymotion/ndk
```</p>

<p>こんな感じになっていればOK。</p>

<h4>5. 必要なバージョンの SDK パッケージを入手</h4>

<p>自分の持っている Android のバージョン (API Level) に合わせてビルドするため、SDK Manager からパッケージを入手する。自分の持っている Android の API レベルは <a href="http://so-zou.jp/mobile-app/tech/android/data/api-level/" title="AndroidのバージョンとAPIレベルの対応関係">このへん</a> を参考にすれば良いだろう。<br/>
例えば Android 4.4 KitKat の端末を持っている場合は API Level 19 ということになる。</p>

<p>確認し終わったら、</p>

<p><code>bash
% cd ~/android-rubymotion
% ./sdk/tools/android
</code></p>

<p>とすると下図のようなウィンドウが表示される。</p>

<p><img src="/images/rubymotion/rubymotion02.jpg" title="&lsquo;SDK Manager&rsquo; &lsquo;SDK Manager&rsquo;" ></p>

<p>対応する API レベルのパッケージをとりあえず全部入れておけば間違いない。 ※4</p>

<h4>6. 端末を開発モードへ</h4>

<p>既に Android 開発をしたことのある人はここは読み飛ばしてください。<br/>
初めての人は <a href="http://smhn.info/201311-android-developer-option" title="Androidの「開発者向けオプション」を表示する方法">このへん</a> を参考にしながら開発者モードを表示して USB デバッグを有効にしてください。</p>

<p>いよいよ準備完了！</p>

<h4>7. Hello World</h4>

<p>任意の場所で以下のコマンドを実行すると、RubyMotion for Android 用のテンプレートプロジェクトが生成される。</p>

<p><code>bash
% motion create --template=android Hello
% cd Hello
</code></p>

<p>Android 端末が USB で接続され、開発用に認識されていることを確認してから ※5 いよいよ実行してみよう。</p>

<p><code>bash
% rake device
</code></p>

<p>コンソールに以下のようなログが表示され、Android 端末にタイトルが Hello とだけ書かれた真っ黒な画面が表示されたら成功である。</p>

<p>```bash
% rake device</p>

<p>   Compile ./app/main_activity.rb</p>

<pre><code>Create ./build/Development-19/lib/armeabi/libpayload.so
Create ./build/Development-19/lib/armeabi/gdbserver
Create ./build/Development-19/lib/armeabi/gdb.setup
Create ./build/Development-19/AndroidManifest.xml
Create ./build/Development-19/classes/com/yourcompany/hello/MainActivity.class
Create ./build/Development-19/classes.dex
Create ./build/Development-19/Hello.apk
  Sign ./build/Development-19/Hello.apk
 Align ./build/Development-19/Hello.apk
</code></pre>

<p>   Install ./build/Development-19/Hello.apk
6102 KB/s (633859 bytes in 0.101s)</p>

<pre><code> Start com.yourcompany.hello/.MainActivity
</code></pre>

<p>&mdash;&mdash;&mdash;&mdash;&ndash; beginning of /dev/log/main
&mdash;&mdash;&mdash;&mdash;&ndash; beginning of /dev/log/system
```</p>

<p><img src="/images/rubymotion/rubymotion03.png" title="&lsquo;Hello World 01&rsquo; &lsquo;Hello World 01&rsquo;" ></p>

<p>もし以下の様なエラーが表示されたら、期待した API バージョンに対してビルドされていない。</p>

<p>```bash
% rake device</p>

<pre><code>ERROR! It looks like your version of the NDK does not support API level L. Switch to a lower API level or install a more recent NDK.
</code></pre>

<p>```</p>

<p>先ほどの Hello ディレクトリ以下の Rakefile を任意のエディタで以下のように編集しよう。<br/>
10行目がミソだ。</p>

<p>```ruby
% vim Rakefile</p>

<h1>&ndash;<em>&ndash; coding: utf-8 &ndash;</em>&ndash;</h1>

<p>$:.unshift(&ldquo;/Library/RubyMotionPre/lib&rdquo;)
require &lsquo;motion/project/template/android&rsquo;</p>

<p>Motion::Project::App.setup do |app|
  # Use `rake config' to see complete project settings.
  app.name = &lsquo;Hello&rsquo;
  app.api_version = &lsquo;19&rsquo;
end
```</p>

<p>もう一度 rake device してうまくいくか試す。</p>

<p>以上で Hello World は終了である。ここまではそれほど難しくないはずだ。</p>

<h3>はじめてのコントローラ</h3>

<p>いよいよ自分でコードを書いていく。</p>

<p><code>bash
% app/main_activity.rb
</code></p>

<p>を任意のエディタで開き、以下のように編集してみよう。</p>

<p>```ruby
% vim app/main_activity.rb</p>

<p>class MainActivity &lt; Android::App::Activity
  def onCreate(savedInstanceState)</p>

<pre><code>super
text_view = Android::Widget::TextView.new(self)
text_view.text = 'Hello RubyMotion!'
self.contentView = text_view
</code></pre>

<p>  end
end
```</p>

<p>保存して rake device すると以下のような画面が表示されるはずだ。</p>

<p><img src="/images/rubymotion/rubymotion04.png" title="&lsquo;Hello World 02&rsquo; &lsquo;Hello World 02&rsquo;" ></p>

<p>コードの内容は簡単で、</p>

<ol>
<li>6行目で TextView のインスタンスを生成し</li>
<li>7行目で文字列を設定し</li>
<li>8行目でそれをこの Activity にセットしている</li>
</ol>


<p>というわけである。なんだか Android 1.5 の頃によく見た入門サイトのようなコードだ。</p>

<p>後で少し補足するが、<strong>RubyMotion for Android はこれ以上でも以下でもない。</strong><br/>
一旦次に読み進めて欲しい。</p>

<h3>素晴らしき REPL</h3>

<p>RubyMotion には素晴らしい REPL ※6 が備わっている。<br/>
先ほどのコードを次のように変更してみよう。</p>

<p>```ruby
% vim app/main_activity.rb</p>

<p>class MainActivity &lt; Android::App::Activity
  def onCreate(savedInstanceState)</p>

<pre><code>super
text_view = Android::Widget::TextView.new(self)
text_view.text = 'Hello RubyMotion!'
text_view.textSize = 10
text_view.setId 12345
self.contentView = text_view
</code></pre>

<p>  end
end
```</p>

<ol>
<li>8行目でテキストサイズを指定し</li>
<li>9行目で View に対して一意な ID を割り振っている</li>
</ol>


<p>再び実行するが、今度はコンソールで</p>

<ol>
<li><code>text = self.findViewById 12345</code></li>
<li><code>text.setTextSize 100</code></li>
</ol>


<p>のように入力してみよう。</p>

<p>```bash
% rake device</p>

<blockquote><blockquote><p>text = self.findViewById 12345
=> #&lt;android.widget.TextView:0x50600025>
text.setTextSize 100
=> #&lt;android.widget.TextView:0x50800025></p>

<p>```</p></blockquote></blockquote>

<p><img src="/images/rubymotion/rubymotion05.png" title="&lsquo;Hello World 03&rsquo; &lsquo;Hello World 03&rsquo;" ></p>

<p>なんと、対話的に TextView オブジェクトを取り出し、あまつさえ値をセットしなおして即座に端末に反映されてしまった！</p>

<p><strong>SUPER COOOOOOOOOOL!!!</strong></p>

<p>一旦これだけのために RubyMotion を使ってみて欲しいぐらいだ。マジで。</p>

<h3>更に踏み込んでいく</h3>

<p>実際のところ、これだけでは実用的なアプリではない。</p>

<ol>
<li>現実問題、レイアウトをコードで指定することは実際の Android 開発現場ではほとんどありえない</li>
<li>外部ライブラリどうやって使うの？</li>
<li>リソースどこで指定するの？</li>
</ol>


<p>などなど問題は山積みである。</p>

<p>幸い、RubyKaigi で開発者の方と直接お話しをする機会があり、世の中に数多存在するネイティブ Java で書かれたライブラリたちは RubyMotion で使えないのか質問したところ「使える」という回答をもらっており、やり方もざっくりお聞きしてある。</p>

<p>その辺り、どんどん踏み込んで行きたいのだが、いい加減エントリも長くなってきたので別エントリを立てて解説したいと思う。</p>

<p>RubyMotion for Android はまだドキュメントも満足に揃っていないので、この辺りを自分で調べるのは少々骨が折れるのだが、幸い GitHub に <a href="https://github.com/HipByte/RubyMotionSamples" title="RubyMotion Samples">サンプルプロジェクト</a> を上げてくれているので、興味のある人は是非 clone して実行してみて欲しい。</p>

<h3>RubyMotion for Android は世界を救うか</h3>

<p>というわけで、本エントリはまとめに入るが、RubyMotion はネイティブ開発の銀の弾丸になるだろうか？</p>

<p>答えはもちろんノーだ。</p>

<p>先ほどのコントローラのコードを思い出して欲しい。<br/>
あのコードは、Ruby を生まれてこの方みたことなくても Android 開発経験があれば読める。<br/>
逆に言えば、Rubyist でも Android 未経験であればあのコードは（全く理解不能ということはないだろうが）良くわからないはずだ。</p>

<p><strong>RubyMotion はそれさえあれば Android/iOS のことを何も知らなくてもアプリを開発できるものでは全くない。</strong></p>

<p>ライフライクル、イベントハンドリング、非同期処理などなど、OS のフレームワークをもろに意識したコードを書く必要がある。結局はネイティブ開発の知識なしには絶対に成り立たない。</p>

<p>しかしながら、それがどうした？とも言いたい。</p>

<ul>
<li>OS と密接に関わる部分以外は柔軟で記述性の高い Ruby で書ける</li>
<li>そのような部分は Android/iOS で共通のライブラリとして実装可能</li>
<li><strong>Ruby で書くと楽しい！</strong></li>
</ul>


<p>僕はこれらの現実を踏まえた上で、それでも RubyMotion が痛く気に入った。同じように感じる人が RubyMotion を触ってみるきっかけになれば幸いである。</p>

<p>以下、補足。</p>

<h3>RubyMotion 補足</h3>

<p>ライセンスが有効なうちは以下のコマンドで定期的に RubyMotion をアップデートしよう。開発はかなり活発なようだ。</p>

<p><code>bash
% sudo motion update
</code></p>

<p>バージョンは以下で確認することができる。</p>

<p><code>bash
% motion --version
2.24
</code></p>

<p>バージョンは一日に一回サーバと通信してチェックしているとのことで、ライセンス失効が近付くとコマンドラインで教えてくれる。必要に応じて更新すると良いだろう。</p>

<p>その他、サポートが必要な場合は以下のコマンドでブラウザのサポートページへ移動できる。ライセンスが有効な間は自分でチケットを作成して対応してもらうことも可能なはずだ。</p>

<p><code>bash
% motion support
</code></p>

<p>それでは良い RubyMotion ライフを。</p>

<hr />

<h5>注釈</h5>

<p>※1 Android の場合、ランタイムは Dalvik でも ART でもちゃんと動く。<del>詳しくはよく分かってないのだが、Dalvik 環境下では Ruby のコードから DEX を、ART 環境下では LLVM が解釈できるコードをそれぞれ直接吐き出しているのだろうか？詳しい方教えてください。</del></p>

<p>（9/24 追記）</p>

<p>ART ランタイムについて勘違いしていたが、ART はインストール時に dex を端末内でコンパイルするものなので RubyMotion がどうこうとはあまり関係ないかも、と教えていただいた。ありがとうございます！</p>

<p>ちなみに <a href="http://blog.rubymotion.com/post/87048665656/rubymotion-3-0-sneak-peek-android-support" title="RubyMotion 3.0 Sneak Peek: Android Support">公式ブログ</a> を読んでいたら、<strong>RubyMotion for Android では Ruby のコードを LLVM ベースの静的コンパイラで直接 ARM のマシン語に変換し、ランタイムは JNI 越しにそれらのコードにアクセスして実行される</strong>のだと解説してあった。素晴らしい。</p>

<p>（追記ここまで）</p>

<p>※2 JDK 7 だと署名時のコマンドライン引数が変わっていて普通に adb install しようとしても入らない端末(or version?) がある。<a href="http://java.dzone.com/articles/android-solution-install-parse-1">このへん</a> 参照。</p>

<p>※3 良くわからない人は <a href="http://techfun.cc/android/mac-android-sdk-install.html" title="Android環境構築(Mac版) Android SDK インストール">このへん</a> とか見ればいいかも知れません。</p>

<p>※4 良くわからない人は API 10〜19 ぐらいまで全部入れておけば良いです。時間とストレージの無駄ではありますが分からずに悩むよりはマシです。</p>

<p>※5 以下のコマンドを実行して何も表示されないと、開発端末として認識されていない。再度説明を読み直して USB デバッグが有効になっているか確認し、それでもダメならケーブルが「充電専用」とかでないことを確認してみよう。意外と良くあるミス。</p>

<p><code>bash
% ./sdk/platform-tools/adb devices
List of devices attached
0301044a08e4ae97    device
</code></p>

<p>※6 Read Eval Print Loop のこと。その名のごとく、書いたコードを対話的に逐次評価して表示してくれるツール。 個人的に REPL を提供しない言語はクソ言語認定している。</p>
]]></content>
  </entry>
  
</feed>
