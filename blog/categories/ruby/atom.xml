<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | 白山軟件有限公司]]></title>
  <link href="http://blog.shiroyama.us/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.shiroyama.us/"/>
  <updated>2014-10-03T22:38:47+09:00</updated>
  <id>http://blog.shiroyama.us/</id>
  <author>
    <name><![CDATA[Fumihiko Shiroyama]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RubyMotion for Android を使ってみる]]></title>
    <link href="http://blog.shiroyama.us/blog/2014/09/20/rubymotion-for-android/"/>
    <updated>2014-09-20T15:53:05+09:00</updated>
    <id>http://blog.shiroyama.us/blog/2014/09/20/rubymotion-for-android</id>
    <content type="html"><![CDATA[<p>9/16日、<a href="http://blog.rubymotion.com/post/97668474211/announcing-the-public-beta-of-rubymotion-for-android" title="公式ブログ">RubyMotion が Android に対応し public Beta として公開された。</a></p>

<p>9/18〜20まで開催された <a href="http://rubykaigi.org/2014/" title="RubyKaigi 2014">RubyKaigi 2014</a> でも <a href="http://rubykaigi.org/2014/presentation/S-LaurentSansonetti" title="Inside RubyMotion for Android">RubyMotion for Android に関するセッション</a> があり、かなり感銘を受けたのでブログにまとめることにする。</p>

<h3>RubyMotion とは何か</h3>

<p>すごく簡単に言うと iOS や OSX, そして Android のネイティブアプリを Ruby で書けるというツール群である。</p>

<p><a href="http://www.rubymotion.com/">http://www.rubymotion.com/</a></p>

<p>Titanium や PhoneGap とは明確に異なり、各ランタイムが直接解釈できるネイティブコードを生成するのが特徴。従ってパフォーマンス的なオーバーヘッドがほとんどなく ※1 、利用できる OS の API にも基本的に制限がない。</p>

<p>何より Ruby で書けるのである。なんて素晴らしいんだ。</p>

<h3>利用方法</h3>

<p>公式サイトの英語を読むのがめんどくさい人のために2014年9月時点でのライセンス形態等について箇条書きしておく。</p>

<ul>
<li><strong>有料。</strong>199.99ドル

<ul>
<li>1年間のバグフィクス・改良などのアップデートを受けられる</li>
<li>1年間のサポートのためのプライベートチケットを切ることができる</li>
<li>自分の理解では1度買えば1年経つとアップデートは受けられないがそのまま使い続けられる</li>
</ul>
</li>
<li>30日間はトライアル期間として気に入らなければいつでもやめることができる</li>
<li>今は学割的なものはない</li>
<li>1年経つと99.99ドルで（アップデート等の）ライセンスを延長できる</li>
<li>言い忘れたけど OSX の動く Mac が必要なのでそれ以外の環境の方は残念</li>
</ul>


<p>これを高いと見るか安いと見るかは価値観次第だと思うが、トライアル期間があるので少しでも興味がある人は一度試してみると良いと思う。（最初にカードを登録する必要あり。30日以内のキャンセルは &ldquo;返金扱い&rdquo; なのかそれとも &ldquo;30日後に初めて課金される&rdquo; のかは知らない。興味もない）</p>

<h3>使ってみる</h3>

<p><a href="http://sites.fastspring.com/hipbyte/product/rubymotion" title="公式サイト">公式サイト</a> から早速購入してみよう。RubyKaigi 期間中はなんと15%オフ（毎年恒例らしい）なのだが、ブログにまとめるのをモタモタしているうちに閉会してしまった…</p>

<p><img src="/images/rubymotion/rubymotion01.jpg" title="&lsquo;buy rubymotion&rsquo; &lsquo;buy rubymotion&rsquo;" ></p>

<p>購入し終わると登録したメールアドレス宛にライセンスキーとインストーラのダウンロードリンクが届く。 ダウンロードリンクは忘れがちなのでメールは保存しておこう。</p>

<p>ダブルクリックして指示に従っていると何の問題もなくインストールは完了する。</p>

<p>Xcode や AndroidStudio と違い、専用の（エディタを含んだ GUI の）IDE 環境がインストールされる訳ではない。RubyMotion は CUI のビルドツール群という印象に近い。</p>

<p>ツール群は</p>

<p><code>bash
% /Library/RubyMotion/
</code></p>

<p>以下にインストールされ、最も使われる（というかこれしか使ったことがない）motion コマンドは</p>

<p><code>bash
% /usr/bin/motion
</code></p>

<p>にリンクされる。普通にしているとここにはパスが通っているはずなのでコンソールで motion とタイプするだけですぐに利用できるはずだ。</p>

<h3>Hello from RubyMotion for Android</h3>

<p>それでは RubyMotion for Android を使って Hello World をしてみよう。<br/>
<a href="http://www.rubymotion.com/developer-center/guides/getting-started/#_android" title="Getting Started">公式の Getting Started をなぞるだけ</a> で実に簡単に動かすことができるが、例によって英語の説明を読みたくない人のために箇条書きにする。</p>

<h4>1. プレビュー版をインストール</h4>

<p>今日時点で Android 版は public Beta という扱いなので、標準のコンポーネントには含まれていない。以下のコマンドでインストールする。</p>

<p><code>bash
% sudo motion update --pre
</code></p>

<p>ファイルは以下のパスにインストールされるが普通に使っている限り意識することはない。</p>

<p><code>bash
% /Library/RubyMotionPre
</code></p>

<h4>2. JDK をインストール</h4>

<p>JDK 6 をインストールする必要がある。</p>

<blockquote><p>7でも動くけど6を推奨</p></blockquote>

<p>みたいなこと書いてあるけど、<strong>7だと動かない場合があった</strong> ※2 ので言うとおりにすることを強くおすすめする。</p>

<p>OpenJDK か Oracle の JDK か、みたいなことは書いてないが、公式サイトからは <a href="http://support.apple.com/kb/DL1572" title="Java for OSX 2014-001">Apple の Java for OSX 2014-001</a> というのにリンクが張ってあったので素直にこれを入れると良いだろう。</p>

<p>Mac に複数の JDK が入っている場合はやっかいで、僕の知る限り Java には rbenv 的なランタイムのバージョン管理とサンドボックス化を提供してくれる仕組みはない（最近の言語でこういった仕組みがない言語の方がむしろ珍しいよね…まったくトホホだ）ので、自分で JAVA_HOME を変えてやる必要がある。</p>

<p><code>bash
% ls -l /System/Library/Frameworks/JavaVM.framework/Versions
</code></p>

<p>とかしてみて、<strong>1.6</strong> がある且つ複数のバージョンが入っているようなら .zshrc とかに</p>

<p><code>``bash
% cat&lt;&lt;'EOS'&gt;&gt;~/.zshrc
export JAVA_HOME=</code>/System/Library/Frameworks/JavaVM.framework/Versions/A/Commands/java_home -v &ldquo;1.6&rdquo;`
PATH=${JAVA_HOME}/bin:${PATH}
EOS</p>

<p>% source ~/.zshrc</p>

<p>% java -version
java version &ldquo;1.6.0_65&rdquo;
Java&trade; SE Runtime Environment (build 1.6.0_65-b14-466.1-11M4716)
Java HotSpot&trade; 64-Bit Server VM (build 20.65-b04-466.1, mixed mode)
```</p>

<p>のようにして java 1.6 が使われていることを確認しておこう。<a href="http://qiita.com/ringo/items/db58b34dc02a941b297f" title="OSXでJavaのバージョンを切り替える">この Qiita</a> を参考にすると良い。</p>

<h4>3. Androiid SDK をインストール</h4>

<p>公式サイトの例に従い、まずは RubyMotion for Android の作業ディレクトリを作成する。</p>

<p><code>bash
% mkdir ~/android-rubymotion
</code></p>

<p>次に公式サイトでは <a href="http://developer.android.com/sdk/index.html" title="Eclipse ADT">Eclipse ADT</a> をインストールしてその sdk をコピーするように書いてあるが、今更 Eclipse を使っている人も居ないと思うので <a href="https://developer.android.com/sdk/installing/studio.html" title="Android Studio">Android Studio</a> の sdk をシンボリックリンクで利用すると良い。SDK さえ入れられれば方法は問わない。 ※3</p>

<p><code>bash
% cd ~/android-rubymotion
% ln -s /Applications/Android\ Studio.app/sdk sdk
% ls sdk/
add-ons        build-tools    docs           extras         platform-tools platforms      samples        sources        system-images  temp           tools
</code></p>

<h4>4. Androiid NDK をインストール</h4>

<p>ネイティブコンパイルのために <a href="https://developer.android.com/tools/sdk/ndk/index.html" title="Android NDK">Mac OS X 64-bit NDK for 32-bit target</a> を入れる必要がある。</p>

<p>間違えやすいが、必ず <strong>Platform (32-bit target)</strong> かつ <strong>Mac OS X 64-bit</strong> の NDK でなくてはならない。さもなくば動かない旨明記してある。</p>

<p>ダウンロードしたら展開して sdk と同じディレクトリにコピーする。</p>

<p><code>bash
% tar jxvf android-ndk32-r10b-darwin-x86_64.tar.bz2
% cp -r android-ndk-r10 ~/android-rubymotion/ndk
% cd ~/android-rubymotion
% ls ndk/
GNUmakefile               build                     find-win-host.cmd         ndk-depends               ndk-gdb-py.cmd            ndk-which                 remove-windows-symlink.sh tests
README.TXT                docs                      ndk-build                 ndk-gdb                   ndk-gdb.py                platforms                 samples                   toolchains
RELEASE.TXT               documentation.html        ndk-build.cmd             ndk-gdb-py                ndk-stack                 prebuilt                  sources
</code></p>

<p>最後に SDK と NDK を環境変数に登録する。</p>

<p>```bash
% cat&lt;&lt;&lsquo;EOS&rsquo;>>~/.zshrc
export RUBYMOTION_ANDROID_SDK=~/android-rubymotion/sdk
export RUBYMOTION_ANDROID_NDK=~/android-rubymotion/ndk
EOS</p>

<p>% source ~/.zshrc</p>

<p>% env | grep RUBYMOTION_ANDROID
RUBYMOTION_ANDROID_SDK=/Users/shiroyama/android-rubymotion/sdk
RUBYMOTION_ANDROID_NDK=/Users/shiroyama/android-rubymotion/ndk
```</p>

<p>こんな感じになっていればOK。</p>

<h4>5. 必要なバージョンの SDK パッケージを入手</h4>

<p>自分の持っている Android のバージョン (API Level) に合わせてビルドするため、SDK Manager からパッケージを入手する。自分の持っている Android の API レベルは <a href="http://so-zou.jp/mobile-app/tech/android/data/api-level/" title="AndroidのバージョンとAPIレベルの対応関係">このへん</a> を参考にすれば良いだろう。<br/>
例えば Android 4.4 KitKat の端末を持っている場合は API Level 19 ということになる。</p>

<p>確認し終わったら、</p>

<p><code>bash
% cd ~/android-rubymotion
% ./sdk/tools/android
</code></p>

<p>とすると下図のようなウィンドウが表示される。</p>

<p><img src="/images/rubymotion/rubymotion02.jpg" title="&lsquo;SDK Manager&rsquo; &lsquo;SDK Manager&rsquo;" ></p>

<p>対応する API レベルのパッケージをとりあえず全部入れておけば間違いない。 ※4</p>

<h4>6. 端末を開発モードへ</h4>

<p>既に Android 開発をしたことのある人はここは読み飛ばしてください。<br/>
初めての人は <a href="http://smhn.info/201311-android-developer-option" title="Androidの「開発者向けオプション」を表示する方法">このへん</a> を参考にしながら開発者モードを表示して USB デバッグを有効にしてください。</p>

<p>いよいよ準備完了！</p>

<h4>7. Hello World</h4>

<p>任意の場所で以下のコマンドを実行すると、RubyMotion for Android 用のテンプレートプロジェクトが生成される。</p>

<p><code>bash
% motion create --template=android Hello
% cd Hello
</code></p>

<p>Android 端末が USB で接続され、開発用に認識されていることを確認してから ※5 いよいよ実行してみよう。</p>

<p><code>bash
% rake device
</code></p>

<p>コンソールに以下のようなログが表示され、Android 端末にタイトルが Hello とだけ書かれた真っ黒な画面が表示されたら成功である。</p>

<p>```bash
% rake device</p>

<p>   Compile ./app/main_activity.rb</p>

<pre><code>Create ./build/Development-19/lib/armeabi/libpayload.so
Create ./build/Development-19/lib/armeabi/gdbserver
Create ./build/Development-19/lib/armeabi/gdb.setup
Create ./build/Development-19/AndroidManifest.xml
Create ./build/Development-19/classes/com/yourcompany/hello/MainActivity.class
Create ./build/Development-19/classes.dex
Create ./build/Development-19/Hello.apk
  Sign ./build/Development-19/Hello.apk
 Align ./build/Development-19/Hello.apk
</code></pre>

<p>   Install ./build/Development-19/Hello.apk
6102 KB/s (633859 bytes in 0.101s)</p>

<pre><code> Start com.yourcompany.hello/.MainActivity
</code></pre>

<p>&mdash;&mdash;&mdash;&mdash;&ndash; beginning of /dev/log/main
&mdash;&mdash;&mdash;&mdash;&ndash; beginning of /dev/log/system
```</p>

<p><img src="/images/rubymotion/rubymotion03.png" title="&lsquo;Hello World 01&rsquo; &lsquo;Hello World 01&rsquo;" ></p>

<p>もし以下の様なエラーが表示されたら、期待した API バージョンに対してビルドされていない。</p>

<p>```bash
% rake device</p>

<pre><code>ERROR! It looks like your version of the NDK does not support API level L. Switch to a lower API level or install a more recent NDK.
</code></pre>

<p>```</p>

<p>先ほどの Hello ディレクトリ以下の Rakefile を任意のエディタで以下のように編集しよう。<br/>
10行目がミソだ。</p>

<p>```ruby
% vim Rakefile</p>

<h1>&ndash;<em>&ndash; coding: utf-8 &ndash;</em>&ndash;</h1>

<p>$:.unshift(&ldquo;/Library/RubyMotionPre/lib&rdquo;)
require &lsquo;motion/project/template/android&rsquo;</p>

<p>Motion::Project::App.setup do |app|
  # Use `rake config' to see complete project settings.
  app.name = &lsquo;Hello&rsquo;
  app.api_version = &lsquo;19&rsquo;
end
```</p>

<p>もう一度 rake device してうまくいくか試す。</p>

<p>以上で Hello World は終了である。ここまではそれほど難しくないはずだ。</p>

<h3>はじめてのコントローラ</h3>

<p>いよいよ自分でコードを書いていく。</p>

<p><code>bash
% app/main_activity.rb
</code></p>

<p>を任意のエディタで開き、以下のように編集してみよう。</p>

<p>```ruby
% vim app/main_activity.rb</p>

<p>class MainActivity &lt; Android::App::Activity
  def onCreate(savedInstanceState)</p>

<pre><code>super
text_view = Android::Widget::TextView.new(self)
text_view.text = 'Hello RubyMotion!'
self.contentView = text_view
</code></pre>

<p>  end
end
```</p>

<p>保存して rake device すると以下のような画面が表示されるはずだ。</p>

<p><img src="/images/rubymotion/rubymotion04.png" title="&lsquo;Hello World 02&rsquo; &lsquo;Hello World 02&rsquo;" ></p>

<p>コードの内容は簡単で、</p>

<ol>
<li>6行目で TextView のインスタンスを生成し</li>
<li>7行目で文字列を設定し</li>
<li>8行目でそれをこの Activity にセットしている</li>
</ol>


<p>というわけである。なんだか Android 1.5 の頃によく見た入門サイトのようなコードだ。</p>

<p>後で少し補足するが、<strong>RubyMotion for Android はこれ以上でも以下でもない。</strong><br/>
一旦次に読み進めて欲しい。</p>

<h3>素晴らしき REPL</h3>

<p>RubyMotion には素晴らしい REPL ※6 が備わっている。<br/>
先ほどのコードを次のように変更してみよう。</p>

<p>```ruby
% vim app/main_activity.rb</p>

<p>class MainActivity &lt; Android::App::Activity
  def onCreate(savedInstanceState)</p>

<pre><code>super
text_view = Android::Widget::TextView.new(self)
text_view.text = 'Hello RubyMotion!'
text_view.textSize = 10
text_view.setId 12345
self.contentView = text_view
</code></pre>

<p>  end
end
```</p>

<ol>
<li>8行目でテキストサイズを指定し</li>
<li>9行目で View に対して一意な ID を割り振っている</li>
</ol>


<p>再び実行するが、今度はコンソールで</p>

<ol>
<li><code>text = self.findViewById 12345</code></li>
<li><code>text.setTextSize 100</code></li>
</ol>


<p>のように入力してみよう。</p>

<p>```bash
% rake device</p>

<blockquote><blockquote><p>text = self.findViewById 12345
=> #&lt;android.widget.TextView:0x50600025>
text.setTextSize 100
=> #&lt;android.widget.TextView:0x50800025></p>

<p>```</p></blockquote></blockquote>

<p><img src="/images/rubymotion/rubymotion05.png" title="&lsquo;Hello World 03&rsquo; &lsquo;Hello World 03&rsquo;" ></p>

<p>なんと、対話的に TextView オブジェクトを取り出し、あまつさえ値をセットしなおして即座に端末に反映されてしまった！</p>

<p><strong>SUPER COOOOOOOOOOL!!!</strong></p>

<p>一旦これだけのために RubyMotion を使ってみて欲しいぐらいだ。マジで。</p>

<h3>更に踏み込んでいく</h3>

<p>実際のところ、これだけでは実用的なアプリではない。</p>

<ol>
<li>現実問題、レイアウトをコードで指定することは実際の Android 開発現場ではほとんどありえない</li>
<li>外部ライブラリどうやって使うの？</li>
<li>リソースどこで指定するの？</li>
</ol>


<p>などなど問題は山積みである。</p>

<p>幸い、RubyKaigi で開発者の方と直接お話しをする機会があり、世の中に数多存在するネイティブ Java で書かれたライブラリたちは RubyMotion で使えないのか質問したところ「使える」という回答をもらっており、やり方もざっくりお聞きしてある。</p>

<p>その辺り、どんどん踏み込んで行きたいのだが、いい加減エントリも長くなってきたので別エントリを立てて解説したいと思う。</p>

<p>RubyMotion for Android はまだドキュメントも満足に揃っていないので、この辺りを自分で調べるのは少々骨が折れるのだが、幸い GitHub に <a href="https://github.com/HipByte/RubyMotionSamples" title="RubyMotion Samples">サンプルプロジェクト</a> を上げてくれているので、興味のある人は是非 clone して実行してみて欲しい。</p>

<h3>RubyMotion for Android は世界を救うか</h3>

<p>というわけで、本エントリはまとめに入るが、RubyMotion はネイティブ開発の銀の弾丸になるだろうか？</p>

<p>答えはもちろんノーだ。</p>

<p>先ほどのコントローラのコードを思い出して欲しい。<br/>
あのコードは、Ruby を生まれてこの方みたことなくても Android 開発経験があれば読める。<br/>
逆に言えば、Rubyist でも Android 未経験であればあのコードは（全く理解不能ということはないだろうが）良くわからないはずだ。</p>

<p><strong>RubyMotion はそれさえあれば Android/iOS のことを何も知らなくてもアプリを開発できるものでは全くない。</strong></p>

<p>ライフライクル、イベントハンドリング、非同期処理などなど、OS のフレームワークをもろに意識したコードを書く必要がある。結局はネイティブ開発の知識なしには絶対に成り立たない。</p>

<p>しかしながら、それがどうした？とも言いたい。</p>

<ul>
<li>OS と密接に関わる部分以外は柔軟で記述性の高い Ruby で書ける</li>
<li>そのような部分は Android/iOS で共通のライブラリとして実装可能</li>
<li><strong>Ruby で書くと楽しい！</strong></li>
</ul>


<p>僕はこれらの現実を踏まえた上で、それでも RubyMotion が痛く気に入った。同じように感じる人が RubyMotion を触ってみるきっかけになれば幸いである。</p>

<p>以下、補足。</p>

<h3>RubyMotion 補足</h3>

<p>ライセンスが有効なうちは以下のコマンドで定期的に RubyMotion をアップデートしよう。開発はかなり活発なようだ。</p>

<p><code>bash
% sudo motion update
</code></p>

<p>バージョンは以下で確認することができる。</p>

<p><code>bash
% motion --version
2.24
</code></p>

<p>バージョンは一日に一回サーバと通信してチェックしているとのことで、ライセンス失効が近付くとコマンドラインで教えてくれる。必要に応じて更新すると良いだろう。</p>

<p>その他、サポートが必要な場合は以下のコマンドでブラウザのサポートページへ移動できる。ライセンスが有効な間は自分でチケットを作成して対応してもらうことも可能なはずだ。</p>

<p><code>bash
% motion support
</code></p>

<p>それでは良い RubyMotion ライフを。</p>

<hr />

<h5>注釈</h5>

<p>※1 Android の場合、ランタイムは Dalvik でも ART でもちゃんと動く。<del>詳しくはよく分かってないのだが、Dalvik 環境下では Ruby のコードから DEX を、ART 環境下では LLVM が解釈できるコードをそれぞれ直接吐き出しているのだろうか？詳しい方教えてください。</del></p>

<p>（9/24 追記）</p>

<p>ART ランタイムについて勘違いしていたが、ART はインストール時に dex を端末内でコンパイルするものなので RubyMotion がどうこうとはあまり関係ないかも、と教えていただいた。ありがとうございます！</p>

<p>ちなみに <a href="http://blog.rubymotion.com/post/87048665656/rubymotion-3-0-sneak-peek-android-support" title="RubyMotion 3.0 Sneak Peek: Android Support">公式ブログ</a> を読んでいたら、<strong>RubyMotion for Android では Ruby のコードを LLVM ベースの静的コンパイラで直接 ARM のマシン語に変換し、ランタイムは JNI 越しにそれらのコードにアクセスして実行される</strong>のだと解説してあった。素晴らしい。</p>

<p>（追記ここまで）</p>

<p>※2 JDK 7 だと署名時のコマンドライン引数が変わっていて普通に adb install しようとしても入らない端末(or version?) がある。<a href="http://java.dzone.com/articles/android-solution-install-parse-1">このへん</a> 参照。</p>

<p>※3 良くわからない人は <a href="http://techfun.cc/android/mac-android-sdk-install.html" title="Android環境構築(Mac版) Android SDK インストール">このへん</a> とか見ればいいかも知れません。</p>

<p>※4 良くわからない人は API 10〜19 ぐらいまで全部入れておけば良いです。時間とストレージの無駄ではありますが分からずに悩むよりはマシです。</p>

<p>※5 以下のコマンドを実行して何も表示されないと、開発端末として認識されていない。再度説明を読み直して USB デバッグが有効になっているか確認し、それでもダメならケーブルが「充電専用」とかでないことを確認してみよう。意外と良くあるミス。</p>

<p><code>bash
% ./sdk/platform-tools/adb devices
List of devices attached
0301044a08e4ae97    device
</code></p>

<p>※6 Read Eval Print Loop のこと。その名のごとく、書いたコードを対話的に逐次評価して表示してくれるツール。 個人的に REPL を提供しない言語はクソ言語認定している。</p>
]]></content>
  </entry>
  
</feed>
